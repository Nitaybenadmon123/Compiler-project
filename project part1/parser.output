Terminals unused in grammar

    ADDRESS
    BAR


Rules useless in parser due to conflicts

   14 par_list: ε

   42 var_stmt: VAR type_decls block

   61 if_stmt: IF expr COLON block

   68 while_stmt: WHILE expr COLON block

   73 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON block

   85 $@6: ε


State 9 conflicts: 1 shift/reduce
State 29 conflicts: 21 shift/reduce
State 36 conflicts: 10 shift/reduce
State 37 conflicts: 2 shift/reduce
State 43 conflicts: 1 reduce/reduce
State 54 conflicts: 1 shift/reduce
State 55 conflicts: 21 shift/reduce, 24 reduce/reduce
State 69 conflicts: 2 shift/reduce
State 71 conflicts: 21 shift/reduce
State 72 conflicts: 21 shift/reduce
State 73 conflicts: 2 shift/reduce
State 79 conflicts: 21 shift/reduce
State 85 conflicts: 21 shift/reduce
State 90 conflicts: 21 shift/reduce
State 109 conflicts: 21 shift/reduce, 24 reduce/reduce
State 110 conflicts: 21 shift/reduce, 24 reduce/reduce
State 117 conflicts: 22 shift/reduce
State 119 conflicts: 21 shift/reduce
State 121 conflicts: 21 shift/reduce
State 124 conflicts: 21 shift/reduce
State 125 conflicts: 1 shift/reduce
State 126 conflicts: 1 shift/reduce
State 136 conflicts: 24 reduce/reduce
State 139 conflicts: 2 shift/reduce
State 152 conflicts: 21 shift/reduce
State 160 conflicts: 1 shift/reduce
State 161 conflicts: 1 shift/reduce, 24 reduce/reduce
State 164 conflicts: 24 reduce/reduce
State 177 conflicts: 21 shift/reduce, 24 reduce/reduce
State 200 conflicts: 21 shift/reduce
State 224 conflicts: 1 shift/reduce
State 245 conflicts: 21 shift/reduce
State 255 conflicts: 24 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: func_list
    2        | error

    3 func_list: func_list function
    4          | function

    5 $@1: ε

    6 function: DEF ID LPAREN par_list RPAREN COLON RETURNS type $@1 stmt_list

    7 $@2: ε

    8 function: DEF ID LPAREN RPAREN COLON RETURNS type $@2 stmt_list

    9 $@3: ε

   10 function: DEF ID LPAREN par_list RPAREN COLON $@3 stmt_list

   11 $@4: ε

   12 function: DEF ID LPAREN RPAREN COLON $@4 stmt_list

   13 par_list: param_list_item_list
   14         | ε

   15 param_list_item_list: param_list_item_list SEMICOLON par_list_item
   16                     | par_list_item

   17 par_list_item: ID type COLON ID

   18 type: TYPE_INT
   19     | TYPE_CHAR
   20     | TYPE_REAL
   21     | TYPE_BOOL
   22     | TYPE_STRING
   23     | TYPE_INT_PTR
   24     | TYPE_CHAR_PTR
   25     | TYPE_REAL_PTR

   26 stmt_list: stmt_list stmt
   27          | stmt

   28 stmt: assignment
   29     | if_stmt
   30     | return_stmt
   31     | block
   32     | while_stmt
   33     | for_stmt
   34     | call_args
   35     | do_while_stmt
   36     | var_stmt
   37     | void_call
   38     | assignment_call
   39     | func_list

   40 assignment: ID ASSIGN expr SEMICOLON
   41           | ID LBRACK expr RBRACK ASSIGN expr SEMICOLON

   42 var_stmt: VAR type_decls block
   43         | VAR type_decls stmt

   44 type_decls: type_decls type_decl
   45           | type_decl

   46 type_decl: TYPE TYPE_INT COLON ID SEMICOLON
   47          | TYPE TYPE_BOOL COLON ID SEMICOLON
   48          | TYPE TYPE_CHAR COLON ID SEMICOLON
   49          | TYPE TYPE_STRING COLON ID SEMICOLON
   50          | TYPE TYPE_REAL COLON ID SEMICOLON
   51          | TYPE TYPE_REAL COLON ID COLON NUM SEMICOLON
   52          | TYPE TYPE_INT COLON ID COLON NUM SEMICOLON
   53          | TYPE TYPE_CHAR COLON ID COLON CHAR_LITERAL SEMICOLON
   54          | TYPE TYPE_STRING COLON ID COLON STRING_LITERAL SEMICOLON
   55          | TYPE TYPE_BOOL COLON ID COLON TRUE SEMICOLON
   56          | TYPE TYPE_BOOL COLON ID COLON FALSE SEMICOLON
   57          | TYPE TYPE_STRING COLON ID LBRACK NUM RBRACK SEMICOLON

   58 return_stmt: RETURN expr SEMICOLON
   59            | RETURN SEMICOLON

   60 if_stmt: IF expr COLON block ELSE COLON block
   61        | IF expr COLON block
   62        | IF expr COLON stmt
   63        | IF expr COLON stmt ELSE COLON stmt
   64        | IF expr COLON block elif_list ELSE COLON block

   65 elif_list: ELIF expr COLON block
   66          | elif_list ELIF expr COLON block

   67 while_stmt: WHILE COLON expr SEMICOLON
   68           | WHILE expr COLON block
   69           | WHILE expr COLON stmt

   70 do_while_stmt: DO COLON stmt_list WHILE expr SEMICOLON
   71              | DO COLON stmt WHILE expr SEMICOLON
   72              | DO COLON block WHILE expr SEMICOLON

   73 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON block
   74         | FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON stmt

   75 update_expr: ID ASSIGN expr
   76            | expr

   77 call_args: call_list
   78          | ε

   79 call_list: call_list COMMA expr
   80          | expr

   81 assignment_call: ID ASSIGN CALL ID LPAREN call_args RPAREN SEMICOLON

   82 void_call: CALL ID LPAREN call_args RPAREN SEMICOLON

   83 $@5: ε

   84 block: T_BEGIN $@5 stmt_list T_END

   85 $@6: ε

   86 block: T_BEGIN $@6 T_END

   87 expr: expr PLUS expr
   88     | expr MINUS expr
   89     | expr MULT expr
   90     | expr DIV expr
   91     | expr EQ expr
   92     | expr NE expr
   93     | expr LT expr
   94     | expr GT expr
   95     | expr LE expr
   96     | expr GE expr
   97     | LPAREN expr RPAREN
   98     | ID LBRACK expr RBRACK
   99     | LBRACK expr RBRACK
  100     | NUM
  101     | ID
  102     | CHAR_LITERAL
  103     | STRING_LITERAL
  104     | NULLPTR
  105     | TRUE
  106     | FALSE
  107     | AND
  108     | OR
  109     | NOT
  110     | CALL ID LPAREN call_args RPAREN
  111     | ID LPAREN call_args RPAREN
  112     | expr AND expr
  113     | expr OR expr
  114     | NOT expr


Terminals, with rules where they appear

    $end (0) 0
    error (256) 2
    OR (258) 108 113
    AND (259) 107 112
    PLUS (260) 87
    MINUS (261) 88
    MULT (262) 89
    DIV (263) 90
    EQ (264) 91
    NE (265) 92
    GT (266) 94
    GE (267) 96
    LT (268) 93
    LE (269) 95
    NOT (270) 109 114
    ID <sval> (271) 6 8 10 12 17 40 41 46 47 48 49 50 51 52 53 54 55 56 57 75 81 82 98 101 110 111
    CHAR_LITERAL <sval> (272) 53 102
    STRING_LITERAL <sval> (273) 54 103
    NUM <sval> (274) 51 52 57 100
    TRUE <sval> (275) 55 105
    FALSE <sval> (276) 56 106
    TYPE_INT <sval> (277) 18 46 52
    TYPE_CHAR <sval> (278) 19 48 53
    TYPE_REAL <sval> (279) 20 50 51
    TYPE_BOOL <sval> (280) 21 47 55 56
    TYPE_STRING <sval> (281) 22 49 54 57
    TYPE_INT_PTR <sval> (282) 23
    TYPE_CHAR_PTR <sval> (283) 24
    TYPE_REAL_PTR <sval> (284) 25
    DEF (285) 6 8 10 12
    T_BEGIN (286) 84 86
    T_END (287) 84 86
    IF (288) 60 61 62 63 64
    ELSE (289) 60 63 64
    ELIF (290) 65 66
    WHILE (291) 67 68 69 70 71 72
    FOR (292) 73 74
    DO (293) 70 71 72
    CALL (294) 81 82 110
    RETURN (295) 58 59
    RETURNS (296) 6 8
    VAR (297) 42 43
    NULLPTR (298) 104
    ASSIGN (299) 40 41 75 81
    ADDRESS (300)
    COLON (301) 6 8 10 12 17 46 47 48 49 50 51 52 53 54 55 56 57 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74
    SEMICOLON (302) 15 40 41 46 47 48 49 50 51 52 53 54 55 56 57 58 59 67 70 71 72 73 74 81 82
    COMMA (303) 79
    LPAREN (304) 6 8 10 12 73 74 81 82 97 110 111
    RPAREN (305) 6 8 10 12 73 74 81 82 97 110 111
    LBRACK (306) 41 57 98 99
    RBRACK (307) 41 57 98 99
    BAR (308)
    TYPE (309) 46 47 48 49 50 51 52 53 54 55 56 57


Nonterminals, with rules where they appear

    $accept (55)
        on left: 0
    program <ast> (56)
        on left: 1 2
        on right: 0
    func_list <ast> (57)
        on left: 3 4
        on right: 1 3 39
    function <ast> (58)
        on left: 6 8 10 12
        on right: 3 4
    $@1 (59)
        on left: 5
        on right: 6
    $@2 (60)
        on left: 7
        on right: 8
    $@3 (61)
        on left: 9
        on right: 10
    $@4 (62)
        on left: 11
        on right: 12
    par_list <ast> (63)
        on left: 13 14
        on right: 6 10
    param_list_item_list <ast> (64)
        on left: 15 16
        on right: 13 15
    par_list_item <ast> (65)
        on left: 17
        on right: 15 16
    type <ast> (66)
        on left: 18 19 20 21 22 23 24 25
        on right: 6 8 17
    stmt_list <ast> (67)
        on left: 26 27
        on right: 6 8 10 12 26 70 84
    stmt <ast> (68)
        on left: 28 29 30 31 32 33 34 35 36 37 38 39
        on right: 26 27 43 62 63 69 71 74
    assignment <ast> (69)
        on left: 40 41
        on right: 28 73 74
    var_stmt <ast> (70)
        on left: 42 43
        on right: 36
    type_decls <ast> (71)
        on left: 44 45
        on right: 42 43 44
    type_decl <ast> (72)
        on left: 46 47 48 49 50 51 52 53 54 55 56 57
        on right: 44 45
    return_stmt <ast> (73)
        on left: 58 59
        on right: 30
    if_stmt <ast> (74)
        on left: 60 61 62 63 64
        on right: 29
    elif_list <ast> (75)
        on left: 65 66
        on right: 64 66
    while_stmt <ast> (76)
        on left: 67 68 69
        on right: 32
    do_while_stmt <ast> (77)
        on left: 70 71 72
        on right: 35
    for_stmt <ast> (78)
        on left: 73 74
        on right: 33
    update_expr <ast> (79)
        on left: 75 76
        on right: 73 74
    call_args <ast> (80)
        on left: 77 78
        on right: 34 81 82 110 111
    call_list <ast> (81)
        on left: 79 80
        on right: 77 79
    assignment_call <ast> (82)
        on left: 81
        on right: 38
    void_call <ast> (83)
        on left: 82
        on right: 37
    block <ast> (84)
        on left: 84 86
        on right: 31 42 60 61 64 65 66 68 72 73
    $@5 (85)
        on left: 83
        on right: 84
    $@6 (86)
        on left: 85
        on right: 86
    expr <ast> (87)
        on left: 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114
        on right: 40 41 58 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 79 80 87 88 89 90 91 92 93 94 95 96 97 98 99 112 113 114


State 0

    0 $accept: • program $end

    error  shift, and go to state 1
    DEF    shift, and go to state 2

    program    go to state 3
    func_list  go to state 4
    function   go to state 5


State 1

    2 program: error •

    $default  reduce using rule 2 (program)


State 2

    6 function: DEF • ID LPAREN par_list RPAREN COLON RETURNS type $@1 stmt_list
    8         | DEF • ID LPAREN RPAREN COLON RETURNS type $@2 stmt_list
   10         | DEF • ID LPAREN par_list RPAREN COLON $@3 stmt_list
   12         | DEF • ID LPAREN RPAREN COLON $@4 stmt_list

    ID  shift, and go to state 6


State 3

    0 $accept: program • $end

    $end  shift, and go to state 7


State 4

    1 program: func_list •
    3 func_list: func_list • function

    DEF  shift, and go to state 2

    $default  reduce using rule 1 (program)

    function  go to state 8


State 5

    4 func_list: function •

    $default  reduce using rule 4 (func_list)


State 6

    6 function: DEF ID • LPAREN par_list RPAREN COLON RETURNS type $@1 stmt_list
    8         | DEF ID • LPAREN RPAREN COLON RETURNS type $@2 stmt_list
   10         | DEF ID • LPAREN par_list RPAREN COLON $@3 stmt_list
   12         | DEF ID • LPAREN RPAREN COLON $@4 stmt_list

    LPAREN  shift, and go to state 9


State 7

    0 $accept: program $end •

    $default  accept


State 8

    3 func_list: func_list function •

    $default  reduce using rule 3 (func_list)


State 9

    6 function: DEF ID LPAREN • par_list RPAREN COLON RETURNS type $@1 stmt_list
    8         | DEF ID LPAREN • RPAREN COLON RETURNS type $@2 stmt_list
   10         | DEF ID LPAREN • par_list RPAREN COLON $@3 stmt_list
   12         | DEF ID LPAREN • RPAREN COLON $@4 stmt_list

    ID      shift, and go to state 10
    RPAREN  shift, and go to state 11

    RPAREN  [reduce using rule 14 (par_list)]

    par_list              go to state 12
    param_list_item_list  go to state 13
    par_list_item         go to state 14


State 10

   17 par_list_item: ID • type COLON ID

    TYPE_INT       shift, and go to state 15
    TYPE_CHAR      shift, and go to state 16
    TYPE_REAL      shift, and go to state 17
    TYPE_BOOL      shift, and go to state 18
    TYPE_STRING    shift, and go to state 19
    TYPE_INT_PTR   shift, and go to state 20
    TYPE_CHAR_PTR  shift, and go to state 21
    TYPE_REAL_PTR  shift, and go to state 22

    type  go to state 23


State 11

    8 function: DEF ID LPAREN RPAREN • COLON RETURNS type $@2 stmt_list
   12         | DEF ID LPAREN RPAREN • COLON $@4 stmt_list

    COLON  shift, and go to state 24


State 12

    6 function: DEF ID LPAREN par_list • RPAREN COLON RETURNS type $@1 stmt_list
   10         | DEF ID LPAREN par_list • RPAREN COLON $@3 stmt_list

    RPAREN  shift, and go to state 25


State 13

   13 par_list: param_list_item_list •
   15 param_list_item_list: param_list_item_list • SEMICOLON par_list_item

    SEMICOLON  shift, and go to state 26

    $default  reduce using rule 13 (par_list)


State 14

   16 param_list_item_list: par_list_item •

    $default  reduce using rule 16 (param_list_item_list)


State 15

   18 type: TYPE_INT •

    $default  reduce using rule 18 (type)


State 16

   19 type: TYPE_CHAR •

    $default  reduce using rule 19 (type)


State 17

   20 type: TYPE_REAL •

    $default  reduce using rule 20 (type)


State 18

   21 type: TYPE_BOOL •

    $default  reduce using rule 21 (type)


State 19

   22 type: TYPE_STRING •

    $default  reduce using rule 22 (type)


State 20

   23 type: TYPE_INT_PTR •

    $default  reduce using rule 23 (type)


State 21

   24 type: TYPE_CHAR_PTR •

    $default  reduce using rule 24 (type)


State 22

   25 type: TYPE_REAL_PTR •

    $default  reduce using rule 25 (type)


State 23

   17 par_list_item: ID type • COLON ID

    COLON  shift, and go to state 27


State 24

    8 function: DEF ID LPAREN RPAREN COLON • RETURNS type $@2 stmt_list
   12         | DEF ID LPAREN RPAREN COLON • $@4 stmt_list

    RETURNS  shift, and go to state 28

    $default  reduce using rule 11 ($@4)

    $@4  go to state 29


State 25

    6 function: DEF ID LPAREN par_list RPAREN • COLON RETURNS type $@1 stmt_list
   10         | DEF ID LPAREN par_list RPAREN • COLON $@3 stmt_list

    COLON  shift, and go to state 30


State 26

   15 param_list_item_list: param_list_item_list SEMICOLON • par_list_item

    ID  shift, and go to state 10

    par_list_item  go to state 31


State 27

   17 par_list_item: ID type COLON • ID

    ID  shift, and go to state 32


State 28

    8 function: DEF ID LPAREN RPAREN COLON RETURNS • type $@2 stmt_list

    TYPE_INT       shift, and go to state 15
    TYPE_CHAR      shift, and go to state 16
    TYPE_REAL      shift, and go to state 17
    TYPE_BOOL      shift, and go to state 18
    TYPE_STRING    shift, and go to state 19
    TYPE_INT_PTR   shift, and go to state 20
    TYPE_CHAR_PTR  shift, and go to state 21
    TYPE_REAL_PTR  shift, and go to state 22

    type  go to state 33


State 29

   12 function: DEF ID LPAREN RPAREN COLON $@4 • stmt_list

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 78 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 55
    stmt             go to state 56
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 30

    6 function: DEF ID LPAREN par_list RPAREN COLON • RETURNS type $@1 stmt_list
   10         | DEF ID LPAREN par_list RPAREN COLON • $@3 stmt_list

    RETURNS  shift, and go to state 70

    $default  reduce using rule 9 ($@3)

    $@3  go to state 71


State 31

   15 param_list_item_list: param_list_item_list SEMICOLON par_list_item •

    $default  reduce using rule 15 (param_list_item_list)


State 32

   17 par_list_item: ID type COLON ID •

    $default  reduce using rule 17 (par_list_item)


State 33

    8 function: DEF ID LPAREN RPAREN COLON RETURNS type • $@2 stmt_list

    $default  reduce using rule 7 ($@2)

    $@2  go to state 72


State 34

  108 expr: OR •

    $default  reduce using rule 108 (expr)


State 35

  107 expr: AND •

    $default  reduce using rule 107 (expr)


State 36

  109 expr: NOT •
  114     | NOT • expr

    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    ID              [reduce using rule 109 (expr)]
    CHAR_LITERAL    [reduce using rule 109 (expr)]
    STRING_LITERAL  [reduce using rule 109 (expr)]
    NUM             [reduce using rule 109 (expr)]
    TRUE            [reduce using rule 109 (expr)]
    FALSE           [reduce using rule 109 (expr)]
    CALL            [reduce using rule 109 (expr)]
    NULLPTR         [reduce using rule 109 (expr)]
    LPAREN          [reduce using rule 109 (expr)]
    LBRACK          [reduce using rule 109 (expr)]
    $default        reduce using rule 109 (expr)

    expr  go to state 75


State 37

   40 assignment: ID • ASSIGN expr SEMICOLON
   41           | ID • LBRACK expr RBRACK ASSIGN expr SEMICOLON
   81 assignment_call: ID • ASSIGN CALL ID LPAREN call_args RPAREN SEMICOLON
   98 expr: ID • LBRACK expr RBRACK
  101     | ID •
  111     | ID • LPAREN call_args RPAREN

    ASSIGN  shift, and go to state 76
    LPAREN  shift, and go to state 77
    LBRACK  shift, and go to state 78

    LPAREN    [reduce using rule 101 (expr)]
    LBRACK    [reduce using rule 101 (expr)]
    $default  reduce using rule 101 (expr)


State 38

  102 expr: CHAR_LITERAL •

    $default  reduce using rule 102 (expr)


State 39

  103 expr: STRING_LITERAL •

    $default  reduce using rule 103 (expr)


State 40

  100 expr: NUM •

    $default  reduce using rule 100 (expr)


State 41

  105 expr: TRUE •

    $default  reduce using rule 105 (expr)


State 42

  106 expr: FALSE •

    $default  reduce using rule 106 (expr)


State 43

   84 block: T_BEGIN • $@5 stmt_list T_END
   86      | T_BEGIN • $@6 T_END

    T_END     reduce using rule 83 ($@5)
    T_END     [reduce using rule 85 ($@6)]
    $default  reduce using rule 83 ($@5)

    $@5  go to state 79
    $@6  go to state 80


State 44

   60 if_stmt: IF • expr COLON block ELSE COLON block
   61        | IF • expr COLON block
   62        | IF • expr COLON stmt
   63        | IF • expr COLON stmt ELSE COLON stmt
   64        | IF • expr COLON block elif_list ELSE COLON block

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 81


State 45

   67 while_stmt: WHILE • COLON expr SEMICOLON
   68           | WHILE • expr COLON block
   69           | WHILE • expr COLON stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    COLON           shift, and go to state 82
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 83


State 46

   73 for_stmt: FOR • LPAREN assignment expr SEMICOLON update_expr RPAREN COLON block
   74         | FOR • LPAREN assignment expr SEMICOLON update_expr RPAREN COLON stmt

    LPAREN  shift, and go to state 84


State 47

   70 do_while_stmt: DO • COLON stmt_list WHILE expr SEMICOLON
   71              | DO • COLON stmt WHILE expr SEMICOLON
   72              | DO • COLON block WHILE expr SEMICOLON

    COLON  shift, and go to state 85


State 48

   82 void_call: CALL • ID LPAREN call_args RPAREN SEMICOLON
  110 expr: CALL • ID LPAREN call_args RPAREN

    ID  shift, and go to state 86


State 49

   58 return_stmt: RETURN • expr SEMICOLON
   59            | RETURN • SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    SEMICOLON       shift, and go to state 87
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 88


State 50

   42 var_stmt: VAR • type_decls block
   43         | VAR • type_decls stmt

    TYPE  shift, and go to state 89

    type_decls  go to state 90
    type_decl   go to state 91


State 51

  104 expr: NULLPTR •

    $default  reduce using rule 104 (expr)


State 52

   97 expr: LPAREN • expr RPAREN

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 92


State 53

   99 expr: LBRACK • expr RBRACK

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 93


State 54

    3 func_list: func_list • function
   39 stmt: func_list •

    DEF  shift, and go to state 2

    DEF       [reduce using rule 39 (stmt)]
    $default  reduce using rule 39 (stmt)

    function  go to state 8


State 55

   12 function: DEF ID LPAREN RPAREN COLON $@4 stmt_list •
   26 stmt_list: stmt_list • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $end            reduce using rule 12 (function)
    $end            [reduce using rule 78 (call_args)]
    OR              [reduce using rule 12 (function)]
    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 12 (function)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 12 (function)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 12 (function)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 12 (function)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 12 (function)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 12 (function)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 12 (function)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 12 (function)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 12 (function)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 12 (function)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    T_END           reduce using rule 12 (function)
    T_END           [reduce using rule 78 (call_args)]
    IF              [reduce using rule 12 (function)]
    IF              [reduce using rule 78 (call_args)]
    ELSE            reduce using rule 12 (function)
    ELSE            [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 12 (function)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 12 (function)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 12 (function)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 12 (function)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 12 (function)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 12 (function)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 12 (function)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 12 (function)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 12 (function)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 12 (function)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 94
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 56

   27 stmt_list: stmt •

    $default  reduce using rule 27 (stmt_list)


State 57

   28 stmt: assignment •

    $default  reduce using rule 28 (stmt)


State 58

   36 stmt: var_stmt •

    $default  reduce using rule 36 (stmt)


State 59

   30 stmt: return_stmt •

    $default  reduce using rule 30 (stmt)


State 60

   29 stmt: if_stmt •

    $default  reduce using rule 29 (stmt)


State 61

   32 stmt: while_stmt •

    $default  reduce using rule 32 (stmt)


State 62

   35 stmt: do_while_stmt •

    $default  reduce using rule 35 (stmt)


State 63

   33 stmt: for_stmt •

    $default  reduce using rule 33 (stmt)


State 64

   34 stmt: call_args •

    $default  reduce using rule 34 (stmt)


State 65

   77 call_args: call_list •
   79 call_list: call_list • COMMA expr

    COMMA  shift, and go to state 95

    $default  reduce using rule 77 (call_args)


State 66

   38 stmt: assignment_call •

    $default  reduce using rule 38 (stmt)


State 67

   37 stmt: void_call •

    $default  reduce using rule 37 (stmt)


State 68

   31 stmt: block •

    $default  reduce using rule 31 (stmt)


State 69

   80 call_list: expr •
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR     shift, and go to state 96
    AND    shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    MULT   shift, and go to state 100
    DIV    shift, and go to state 101
    EQ     shift, and go to state 102
    NE     shift, and go to state 103
    GT     shift, and go to state 104
    GE     shift, and go to state 105
    LT     shift, and go to state 106
    LE     shift, and go to state 107

    OR        [reduce using rule 80 (call_list)]
    AND       [reduce using rule 80 (call_list)]
    $default  reduce using rule 80 (call_list)


State 70

    6 function: DEF ID LPAREN par_list RPAREN COLON RETURNS • type $@1 stmt_list

    TYPE_INT       shift, and go to state 15
    TYPE_CHAR      shift, and go to state 16
    TYPE_REAL      shift, and go to state 17
    TYPE_BOOL      shift, and go to state 18
    TYPE_STRING    shift, and go to state 19
    TYPE_INT_PTR   shift, and go to state 20
    TYPE_CHAR_PTR  shift, and go to state 21
    TYPE_REAL_PTR  shift, and go to state 22

    type  go to state 108


State 71

   10 function: DEF ID LPAREN par_list RPAREN COLON $@3 • stmt_list

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 78 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 109
    stmt             go to state 56
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 72

    8 function: DEF ID LPAREN RPAREN COLON RETURNS type $@2 • stmt_list

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 78 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 110
    stmt             go to state 56
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 73

   98 expr: ID • LBRACK expr RBRACK
  101     | ID •
  111     | ID • LPAREN call_args RPAREN

    LPAREN  shift, and go to state 77
    LBRACK  shift, and go to state 111

    LPAREN    [reduce using rule 101 (expr)]
    LBRACK    [reduce using rule 101 (expr)]
    $default  reduce using rule 101 (expr)


State 74

  110 expr: CALL • ID LPAREN call_args RPAREN

    ID  shift, and go to state 112


State 75

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr
  114     | NOT expr •

    $default  reduce using rule 114 (expr)


State 76

   40 assignment: ID ASSIGN • expr SEMICOLON
   81 assignment_call: ID ASSIGN • CALL ID LPAREN call_args RPAREN SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 113
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 114


State 77

  111 expr: ID LPAREN • call_args RPAREN

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $default  reduce using rule 78 (call_args)

    call_args  go to state 115
    call_list  go to state 65
    expr       go to state 69


State 78

   41 assignment: ID LBRACK • expr RBRACK ASSIGN expr SEMICOLON
   98 expr: ID LBRACK • expr RBRACK

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 116


State 79

   84 block: T_BEGIN $@5 • stmt_list T_END

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 78 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 117
    stmt             go to state 56
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 80

   86 block: T_BEGIN $@6 • T_END

    T_END  shift, and go to state 118


State 81

   60 if_stmt: IF expr • COLON block ELSE COLON block
   61        | IF expr • COLON block
   62        | IF expr • COLON stmt
   63        | IF expr • COLON stmt ELSE COLON stmt
   64        | IF expr • COLON block elif_list ELSE COLON block
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR     shift, and go to state 96
    AND    shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    MULT   shift, and go to state 100
    DIV    shift, and go to state 101
    EQ     shift, and go to state 102
    NE     shift, and go to state 103
    GT     shift, and go to state 104
    GE     shift, and go to state 105
    LT     shift, and go to state 106
    LE     shift, and go to state 107
    COLON  shift, and go to state 119


State 82

   67 while_stmt: WHILE COLON • expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 120


State 83

   68 while_stmt: WHILE expr • COLON block
   69           | WHILE expr • COLON stmt
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR     shift, and go to state 96
    AND    shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    MULT   shift, and go to state 100
    DIV    shift, and go to state 101
    EQ     shift, and go to state 102
    NE     shift, and go to state 103
    GT     shift, and go to state 104
    GE     shift, and go to state 105
    LT     shift, and go to state 106
    LE     shift, and go to state 107
    COLON  shift, and go to state 121


State 84

   73 for_stmt: FOR LPAREN • assignment expr SEMICOLON update_expr RPAREN COLON block
   74         | FOR LPAREN • assignment expr SEMICOLON update_expr RPAREN COLON stmt

    ID  shift, and go to state 122

    assignment  go to state 123


State 85

   70 do_while_stmt: DO COLON • stmt_list WHILE expr SEMICOLON
   71              | DO COLON • stmt WHILE expr SEMICOLON
   72              | DO COLON • block WHILE expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 124
    stmt             go to state 125
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 126
    expr             go to state 69


State 86

   82 void_call: CALL ID • LPAREN call_args RPAREN SEMICOLON
  110 expr: CALL ID • LPAREN call_args RPAREN

    LPAREN  shift, and go to state 127


State 87

   59 return_stmt: RETURN SEMICOLON •

    $default  reduce using rule 59 (return_stmt)


State 88

   58 return_stmt: RETURN expr • SEMICOLON
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR         shift, and go to state 96
    AND        shift, and go to state 97
    PLUS       shift, and go to state 98
    MINUS      shift, and go to state 99
    MULT       shift, and go to state 100
    DIV        shift, and go to state 101
    EQ         shift, and go to state 102
    NE         shift, and go to state 103
    GT         shift, and go to state 104
    GE         shift, and go to state 105
    LT         shift, and go to state 106
    LE         shift, and go to state 107
    SEMICOLON  shift, and go to state 128


State 89

   46 type_decl: TYPE • TYPE_INT COLON ID SEMICOLON
   47          | TYPE • TYPE_BOOL COLON ID SEMICOLON
   48          | TYPE • TYPE_CHAR COLON ID SEMICOLON
   49          | TYPE • TYPE_STRING COLON ID SEMICOLON
   50          | TYPE • TYPE_REAL COLON ID SEMICOLON
   51          | TYPE • TYPE_REAL COLON ID COLON NUM SEMICOLON
   52          | TYPE • TYPE_INT COLON ID COLON NUM SEMICOLON
   53          | TYPE • TYPE_CHAR COLON ID COLON CHAR_LITERAL SEMICOLON
   54          | TYPE • TYPE_STRING COLON ID COLON STRING_LITERAL SEMICOLON
   55          | TYPE • TYPE_BOOL COLON ID COLON TRUE SEMICOLON
   56          | TYPE • TYPE_BOOL COLON ID COLON FALSE SEMICOLON
   57          | TYPE • TYPE_STRING COLON ID LBRACK NUM RBRACK SEMICOLON

    TYPE_INT     shift, and go to state 129
    TYPE_CHAR    shift, and go to state 130
    TYPE_REAL    shift, and go to state 131
    TYPE_BOOL    shift, and go to state 132
    TYPE_STRING  shift, and go to state 133


State 90

   42 var_stmt: VAR type_decls • block
   43         | VAR type_decls • stmt
   44 type_decls: type_decls • type_decl

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53
    TYPE            shift, and go to state 89

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 78 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 134
    assignment       go to state 57
    var_stmt         go to state 58
    type_decl        go to state 135
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 136
    expr             go to state 69


State 91

   45 type_decls: type_decl •

    $default  reduce using rule 45 (type_decls)


State 92

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
   97     | LPAREN expr • RPAREN
  112     | expr • AND expr
  113     | expr • OR expr

    OR      shift, and go to state 96
    AND     shift, and go to state 97
    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MULT    shift, and go to state 100
    DIV     shift, and go to state 101
    EQ      shift, and go to state 102
    NE      shift, and go to state 103
    GT      shift, and go to state 104
    GE      shift, and go to state 105
    LT      shift, and go to state 106
    LE      shift, and go to state 107
    RPAREN  shift, and go to state 137


State 93

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
   99     | LBRACK expr • RBRACK
  112     | expr • AND expr
  113     | expr • OR expr

    OR      shift, and go to state 96
    AND     shift, and go to state 97
    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MULT    shift, and go to state 100
    DIV     shift, and go to state 101
    EQ      shift, and go to state 102
    NE      shift, and go to state 103
    GT      shift, and go to state 104
    GE      shift, and go to state 105
    LT      shift, and go to state 106
    LE      shift, and go to state 107
    RBRACK  shift, and go to state 138


State 94

   26 stmt_list: stmt_list stmt •

    $default  reduce using rule 26 (stmt_list)


State 95

   79 call_list: call_list COMMA • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 139


State 96

  113 expr: expr OR • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 140


State 97

  112 expr: expr AND • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 141


State 98

   87 expr: expr PLUS • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 142


State 99

   88 expr: expr MINUS • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 143


State 100

   89 expr: expr MULT • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 144


State 101

   90 expr: expr DIV • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 145


State 102

   91 expr: expr EQ • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 146


State 103

   92 expr: expr NE • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 147


State 104

   94 expr: expr GT • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 148


State 105

   96 expr: expr GE • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 149


State 106

   93 expr: expr LT • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 150


State 107

   95 expr: expr LE • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 151


State 108

    6 function: DEF ID LPAREN par_list RPAREN COLON RETURNS type • $@1 stmt_list

    $default  reduce using rule 5 ($@1)

    $@1  go to state 152


State 109

   10 function: DEF ID LPAREN par_list RPAREN COLON $@3 stmt_list •
   26 stmt_list: stmt_list • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $end            reduce using rule 10 (function)
    $end            [reduce using rule 78 (call_args)]
    OR              [reduce using rule 10 (function)]
    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 10 (function)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 10 (function)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 10 (function)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 10 (function)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 10 (function)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 10 (function)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 10 (function)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 10 (function)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 10 (function)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 10 (function)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    T_END           reduce using rule 10 (function)
    T_END           [reduce using rule 78 (call_args)]
    IF              [reduce using rule 10 (function)]
    IF              [reduce using rule 78 (call_args)]
    ELSE            reduce using rule 10 (function)
    ELSE            [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 10 (function)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 10 (function)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 10 (function)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 10 (function)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 10 (function)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 10 (function)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 10 (function)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 10 (function)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 10 (function)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 10 (function)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 94
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 110

    8 function: DEF ID LPAREN RPAREN COLON RETURNS type $@2 stmt_list •
   26 stmt_list: stmt_list • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $end            reduce using rule 8 (function)
    $end            [reduce using rule 78 (call_args)]
    OR              [reduce using rule 8 (function)]
    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 8 (function)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 8 (function)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 8 (function)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 8 (function)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 8 (function)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 8 (function)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 8 (function)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 8 (function)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 8 (function)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 8 (function)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    T_END           reduce using rule 8 (function)
    T_END           [reduce using rule 78 (call_args)]
    IF              [reduce using rule 8 (function)]
    IF              [reduce using rule 78 (call_args)]
    ELSE            reduce using rule 8 (function)
    ELSE            [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 8 (function)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 8 (function)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 8 (function)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 8 (function)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 8 (function)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 8 (function)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 8 (function)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 8 (function)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 8 (function)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 8 (function)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 94
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 111

   98 expr: ID LBRACK • expr RBRACK

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 153


State 112

  110 expr: CALL ID • LPAREN call_args RPAREN

    LPAREN  shift, and go to state 154


State 113

   81 assignment_call: ID ASSIGN CALL • ID LPAREN call_args RPAREN SEMICOLON
  110 expr: CALL • ID LPAREN call_args RPAREN

    ID  shift, and go to state 155


State 114

   40 assignment: ID ASSIGN expr • SEMICOLON
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR         shift, and go to state 96
    AND        shift, and go to state 97
    PLUS       shift, and go to state 98
    MINUS      shift, and go to state 99
    MULT       shift, and go to state 100
    DIV        shift, and go to state 101
    EQ         shift, and go to state 102
    NE         shift, and go to state 103
    GT         shift, and go to state 104
    GE         shift, and go to state 105
    LT         shift, and go to state 106
    LE         shift, and go to state 107
    SEMICOLON  shift, and go to state 156


State 115

  111 expr: ID LPAREN call_args • RPAREN

    RPAREN  shift, and go to state 157


State 116

   41 assignment: ID LBRACK expr • RBRACK ASSIGN expr SEMICOLON
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
   98     | ID LBRACK expr • RBRACK
  112     | expr • AND expr
  113     | expr • OR expr

    OR      shift, and go to state 96
    AND     shift, and go to state 97
    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MULT    shift, and go to state 100
    DIV     shift, and go to state 101
    EQ      shift, and go to state 102
    NE      shift, and go to state 103
    GT      shift, and go to state 104
    GE      shift, and go to state 105
    LT      shift, and go to state 106
    LE      shift, and go to state 107
    RBRACK  shift, and go to state 158


State 117

   26 stmt_list: stmt_list • stmt
   84 block: T_BEGIN $@5 stmt_list • T_END

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    T_END           shift, and go to state 159
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    T_END           [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 94
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 118

   86 block: T_BEGIN $@6 T_END •

    $default  reduce using rule 86 (block)


State 119

   60 if_stmt: IF expr COLON • block ELSE COLON block
   61        | IF expr COLON • block
   62        | IF expr COLON • stmt
   63        | IF expr COLON • stmt ELSE COLON stmt
   64        | IF expr COLON • block elif_list ELSE COLON block

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 78 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 160
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 161
    expr             go to state 69


State 120

   67 while_stmt: WHILE COLON expr • SEMICOLON
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR         shift, and go to state 96
    AND        shift, and go to state 97
    PLUS       shift, and go to state 98
    MINUS      shift, and go to state 99
    MULT       shift, and go to state 100
    DIV        shift, and go to state 101
    EQ         shift, and go to state 102
    NE         shift, and go to state 103
    GT         shift, and go to state 104
    GE         shift, and go to state 105
    LT         shift, and go to state 106
    LE         shift, and go to state 107
    SEMICOLON  shift, and go to state 162


State 121

   68 while_stmt: WHILE expr COLON • block
   69           | WHILE expr COLON • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 78 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 163
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 164
    expr             go to state 69


State 122

   40 assignment: ID • ASSIGN expr SEMICOLON
   41           | ID • LBRACK expr RBRACK ASSIGN expr SEMICOLON

    ASSIGN  shift, and go to state 165
    LBRACK  shift, and go to state 166


State 123

   73 for_stmt: FOR LPAREN assignment • expr SEMICOLON update_expr RPAREN COLON block
   74         | FOR LPAREN assignment • expr SEMICOLON update_expr RPAREN COLON stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 167


State 124

   26 stmt_list: stmt_list • stmt
   70 do_while_stmt: DO COLON stmt_list • WHILE expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 168
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 94
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 125

   27 stmt_list: stmt •
   71 do_while_stmt: DO COLON stmt • WHILE expr SEMICOLON

    WHILE  shift, and go to state 169

    WHILE     [reduce using rule 27 (stmt_list)]
    $default  reduce using rule 27 (stmt_list)


State 126

   31 stmt: block •
   72 do_while_stmt: DO COLON block • WHILE expr SEMICOLON

    WHILE  shift, and go to state 170

    WHILE     [reduce using rule 31 (stmt)]
    $default  reduce using rule 31 (stmt)


State 127

   82 void_call: CALL ID LPAREN • call_args RPAREN SEMICOLON
  110 expr: CALL ID LPAREN • call_args RPAREN

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $default  reduce using rule 78 (call_args)

    call_args  go to state 171
    call_list  go to state 65
    expr       go to state 69


State 128

   58 return_stmt: RETURN expr SEMICOLON •

    $default  reduce using rule 58 (return_stmt)


State 129

   46 type_decl: TYPE TYPE_INT • COLON ID SEMICOLON
   52          | TYPE TYPE_INT • COLON ID COLON NUM SEMICOLON

    COLON  shift, and go to state 172


State 130

   48 type_decl: TYPE TYPE_CHAR • COLON ID SEMICOLON
   53          | TYPE TYPE_CHAR • COLON ID COLON CHAR_LITERAL SEMICOLON

    COLON  shift, and go to state 173


State 131

   50 type_decl: TYPE TYPE_REAL • COLON ID SEMICOLON
   51          | TYPE TYPE_REAL • COLON ID COLON NUM SEMICOLON

    COLON  shift, and go to state 174


State 132

   47 type_decl: TYPE TYPE_BOOL • COLON ID SEMICOLON
   55          | TYPE TYPE_BOOL • COLON ID COLON TRUE SEMICOLON
   56          | TYPE TYPE_BOOL • COLON ID COLON FALSE SEMICOLON

    COLON  shift, and go to state 175


State 133

   49 type_decl: TYPE TYPE_STRING • COLON ID SEMICOLON
   54          | TYPE TYPE_STRING • COLON ID COLON STRING_LITERAL SEMICOLON
   57          | TYPE TYPE_STRING • COLON ID LBRACK NUM RBRACK SEMICOLON

    COLON  shift, and go to state 176


State 134

   43 var_stmt: VAR type_decls stmt •

    $default  reduce using rule 43 (var_stmt)


State 135

   44 type_decls: type_decls type_decl •

    $default  reduce using rule 44 (type_decls)


State 136

   31 stmt: block •
   42 var_stmt: VAR type_decls block •

    $end            reduce using rule 31 (stmt)
    $end            [reduce using rule 42 (var_stmt)]
    OR              reduce using rule 31 (stmt)
    OR              [reduce using rule 42 (var_stmt)]
    AND             reduce using rule 31 (stmt)
    AND             [reduce using rule 42 (var_stmt)]
    NOT             reduce using rule 31 (stmt)
    NOT             [reduce using rule 42 (var_stmt)]
    ID              reduce using rule 31 (stmt)
    ID              [reduce using rule 42 (var_stmt)]
    CHAR_LITERAL    reduce using rule 31 (stmt)
    CHAR_LITERAL    [reduce using rule 42 (var_stmt)]
    STRING_LITERAL  reduce using rule 31 (stmt)
    STRING_LITERAL  [reduce using rule 42 (var_stmt)]
    NUM             reduce using rule 31 (stmt)
    NUM             [reduce using rule 42 (var_stmt)]
    TRUE            reduce using rule 31 (stmt)
    TRUE            [reduce using rule 42 (var_stmt)]
    FALSE           reduce using rule 31 (stmt)
    FALSE           [reduce using rule 42 (var_stmt)]
    DEF             reduce using rule 31 (stmt)
    DEF             [reduce using rule 42 (var_stmt)]
    T_BEGIN         reduce using rule 31 (stmt)
    T_BEGIN         [reduce using rule 42 (var_stmt)]
    T_END           reduce using rule 31 (stmt)
    T_END           [reduce using rule 42 (var_stmt)]
    IF              reduce using rule 31 (stmt)
    IF              [reduce using rule 42 (var_stmt)]
    ELSE            reduce using rule 31 (stmt)
    ELSE            [reduce using rule 42 (var_stmt)]
    WHILE           reduce using rule 31 (stmt)
    WHILE           [reduce using rule 42 (var_stmt)]
    FOR             reduce using rule 31 (stmt)
    FOR             [reduce using rule 42 (var_stmt)]
    DO              reduce using rule 31 (stmt)
    DO              [reduce using rule 42 (var_stmt)]
    CALL            reduce using rule 31 (stmt)
    CALL            [reduce using rule 42 (var_stmt)]
    RETURN          reduce using rule 31 (stmt)
    RETURN          [reduce using rule 42 (var_stmt)]
    VAR             reduce using rule 31 (stmt)
    VAR             [reduce using rule 42 (var_stmt)]
    NULLPTR         reduce using rule 31 (stmt)
    NULLPTR         [reduce using rule 42 (var_stmt)]
    LPAREN          reduce using rule 31 (stmt)
    LPAREN          [reduce using rule 42 (var_stmt)]
    LBRACK          reduce using rule 31 (stmt)
    LBRACK          [reduce using rule 42 (var_stmt)]
    $default        reduce using rule 31 (stmt)


State 137

   97 expr: LPAREN expr RPAREN •

    $default  reduce using rule 97 (expr)


State 138

   99 expr: LBRACK expr RBRACK •

    $default  reduce using rule 99 (expr)


State 139

   79 call_list: call_list COMMA expr •
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR     shift, and go to state 96
    AND    shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    MULT   shift, and go to state 100
    DIV    shift, and go to state 101
    EQ     shift, and go to state 102
    NE     shift, and go to state 103
    GT     shift, and go to state 104
    GE     shift, and go to state 105
    LT     shift, and go to state 106
    LE     shift, and go to state 107

    OR        [reduce using rule 79 (call_list)]
    AND       [reduce using rule 79 (call_list)]
    $default  reduce using rule 79 (call_list)


State 140

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr
  113     | expr OR expr •

    AND    shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    MULT   shift, and go to state 100
    DIV    shift, and go to state 101
    EQ     shift, and go to state 102
    NE     shift, and go to state 103
    GT     shift, and go to state 104
    GE     shift, and go to state 105
    LT     shift, and go to state 106
    LE     shift, and go to state 107

    $default  reduce using rule 113 (expr)


State 141

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  112     | expr AND expr •
  113     | expr • OR expr

    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    MULT   shift, and go to state 100
    DIV    shift, and go to state 101
    EQ     shift, and go to state 102
    NE     shift, and go to state 103
    GT     shift, and go to state 104
    GE     shift, and go to state 105
    LT     shift, and go to state 106
    LE     shift, and go to state 107

    $default  reduce using rule 112 (expr)


State 142

   87 expr: expr • PLUS expr
   87     | expr PLUS expr •
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    MULT  shift, and go to state 100
    DIV   shift, and go to state 101
    EQ    shift, and go to state 102
    NE    shift, and go to state 103
    GT    shift, and go to state 104
    GE    shift, and go to state 105
    LT    shift, and go to state 106
    LE    shift, and go to state 107

    $default  reduce using rule 87 (expr)


State 143

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   88     | expr MINUS expr •
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    MULT  shift, and go to state 100
    DIV   shift, and go to state 101
    EQ    shift, and go to state 102
    NE    shift, and go to state 103
    GT    shift, and go to state 104
    GE    shift, and go to state 105
    LT    shift, and go to state 106
    LE    shift, and go to state 107

    $default  reduce using rule 88 (expr)


State 144

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   89     | expr MULT expr •
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    EQ  shift, and go to state 102
    NE  shift, and go to state 103
    GT  shift, and go to state 104
    GE  shift, and go to state 105
    LT  shift, and go to state 106
    LE  shift, and go to state 107

    $default  reduce using rule 89 (expr)


State 145

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   90     | expr DIV expr •
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    EQ  shift, and go to state 102
    NE  shift, and go to state 103
    GT  shift, and go to state 104
    GE  shift, and go to state 105
    LT  shift, and go to state 106
    LE  shift, and go to state 107

    $default  reduce using rule 90 (expr)


State 146

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   91     | expr EQ expr •
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    $default  reduce using rule 91 (expr)


State 147

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   92     | expr NE expr •
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    $default  reduce using rule 92 (expr)


State 148

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   94     | expr GT expr •
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    $default  reduce using rule 94 (expr)


State 149

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
   96     | expr GE expr •
  112     | expr • AND expr
  113     | expr • OR expr

    $default  reduce using rule 96 (expr)


State 150

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   93     | expr LT expr •
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    $default  reduce using rule 93 (expr)


State 151

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   95     | expr LE expr •
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    $default  reduce using rule 95 (expr)


State 152

    6 function: DEF ID LPAREN par_list RPAREN COLON RETURNS type $@1 • stmt_list

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 78 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 177
    stmt             go to state 56
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 153

   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
   98     | ID LBRACK expr • RBRACK
  112     | expr • AND expr
  113     | expr • OR expr

    OR      shift, and go to state 96
    AND     shift, and go to state 97
    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MULT    shift, and go to state 100
    DIV     shift, and go to state 101
    EQ      shift, and go to state 102
    NE      shift, and go to state 103
    GT      shift, and go to state 104
    GE      shift, and go to state 105
    LT      shift, and go to state 106
    LE      shift, and go to state 107
    RBRACK  shift, and go to state 178


State 154

  110 expr: CALL ID LPAREN • call_args RPAREN

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $default  reduce using rule 78 (call_args)

    call_args  go to state 179
    call_list  go to state 65
    expr       go to state 69


State 155

   81 assignment_call: ID ASSIGN CALL ID • LPAREN call_args RPAREN SEMICOLON
  110 expr: CALL ID • LPAREN call_args RPAREN

    LPAREN  shift, and go to state 180


State 156

   40 assignment: ID ASSIGN expr SEMICOLON •

    $default  reduce using rule 40 (assignment)


State 157

  111 expr: ID LPAREN call_args RPAREN •

    $default  reduce using rule 111 (expr)


State 158

   41 assignment: ID LBRACK expr RBRACK • ASSIGN expr SEMICOLON
   98 expr: ID LBRACK expr RBRACK •

    ASSIGN  shift, and go to state 181

    $default  reduce using rule 98 (expr)


State 159

   84 block: T_BEGIN $@5 stmt_list T_END •

    $default  reduce using rule 84 (block)


State 160

   62 if_stmt: IF expr COLON stmt •
   63        | IF expr COLON stmt • ELSE COLON stmt

    ELSE  shift, and go to state 182

    ELSE      [reduce using rule 62 (if_stmt)]
    $default  reduce using rule 62 (if_stmt)


State 161

   31 stmt: block •
   60 if_stmt: IF expr COLON block • ELSE COLON block
   61        | IF expr COLON block •
   64        | IF expr COLON block • elif_list ELSE COLON block

    ELSE  shift, and go to state 183
    ELIF  shift, and go to state 184

    $end            reduce using rule 31 (stmt)
    $end            [reduce using rule 61 (if_stmt)]
    OR              reduce using rule 31 (stmt)
    OR              [reduce using rule 61 (if_stmt)]
    AND             reduce using rule 31 (stmt)
    AND             [reduce using rule 61 (if_stmt)]
    NOT             reduce using rule 31 (stmt)
    NOT             [reduce using rule 61 (if_stmt)]
    ID              reduce using rule 31 (stmt)
    ID              [reduce using rule 61 (if_stmt)]
    CHAR_LITERAL    reduce using rule 31 (stmt)
    CHAR_LITERAL    [reduce using rule 61 (if_stmt)]
    STRING_LITERAL  reduce using rule 31 (stmt)
    STRING_LITERAL  [reduce using rule 61 (if_stmt)]
    NUM             reduce using rule 31 (stmt)
    NUM             [reduce using rule 61 (if_stmt)]
    TRUE            reduce using rule 31 (stmt)
    TRUE            [reduce using rule 61 (if_stmt)]
    FALSE           reduce using rule 31 (stmt)
    FALSE           [reduce using rule 61 (if_stmt)]
    DEF             reduce using rule 31 (stmt)
    DEF             [reduce using rule 61 (if_stmt)]
    T_BEGIN         reduce using rule 31 (stmt)
    T_BEGIN         [reduce using rule 61 (if_stmt)]
    T_END           reduce using rule 31 (stmt)
    T_END           [reduce using rule 61 (if_stmt)]
    IF              reduce using rule 31 (stmt)
    IF              [reduce using rule 61 (if_stmt)]
    ELSE            [reduce using rule 31 (stmt)]
    ELSE            [reduce using rule 61 (if_stmt)]
    WHILE           reduce using rule 31 (stmt)
    WHILE           [reduce using rule 61 (if_stmt)]
    FOR             reduce using rule 31 (stmt)
    FOR             [reduce using rule 61 (if_stmt)]
    DO              reduce using rule 31 (stmt)
    DO              [reduce using rule 61 (if_stmt)]
    CALL            reduce using rule 31 (stmt)
    CALL            [reduce using rule 61 (if_stmt)]
    RETURN          reduce using rule 31 (stmt)
    RETURN          [reduce using rule 61 (if_stmt)]
    VAR             reduce using rule 31 (stmt)
    VAR             [reduce using rule 61 (if_stmt)]
    NULLPTR         reduce using rule 31 (stmt)
    NULLPTR         [reduce using rule 61 (if_stmt)]
    LPAREN          reduce using rule 31 (stmt)
    LPAREN          [reduce using rule 61 (if_stmt)]
    LBRACK          reduce using rule 31 (stmt)
    LBRACK          [reduce using rule 61 (if_stmt)]
    $default        reduce using rule 31 (stmt)

    elif_list  go to state 185


State 162

   67 while_stmt: WHILE COLON expr SEMICOLON •

    $default  reduce using rule 67 (while_stmt)


State 163

   69 while_stmt: WHILE expr COLON stmt •

    $default  reduce using rule 69 (while_stmt)


State 164

   31 stmt: block •
   68 while_stmt: WHILE expr COLON block •

    $end            reduce using rule 31 (stmt)
    $end            [reduce using rule 68 (while_stmt)]
    OR              reduce using rule 31 (stmt)
    OR              [reduce using rule 68 (while_stmt)]
    AND             reduce using rule 31 (stmt)
    AND             [reduce using rule 68 (while_stmt)]
    NOT             reduce using rule 31 (stmt)
    NOT             [reduce using rule 68 (while_stmt)]
    ID              reduce using rule 31 (stmt)
    ID              [reduce using rule 68 (while_stmt)]
    CHAR_LITERAL    reduce using rule 31 (stmt)
    CHAR_LITERAL    [reduce using rule 68 (while_stmt)]
    STRING_LITERAL  reduce using rule 31 (stmt)
    STRING_LITERAL  [reduce using rule 68 (while_stmt)]
    NUM             reduce using rule 31 (stmt)
    NUM             [reduce using rule 68 (while_stmt)]
    TRUE            reduce using rule 31 (stmt)
    TRUE            [reduce using rule 68 (while_stmt)]
    FALSE           reduce using rule 31 (stmt)
    FALSE           [reduce using rule 68 (while_stmt)]
    DEF             reduce using rule 31 (stmt)
    DEF             [reduce using rule 68 (while_stmt)]
    T_BEGIN         reduce using rule 31 (stmt)
    T_BEGIN         [reduce using rule 68 (while_stmt)]
    T_END           reduce using rule 31 (stmt)
    T_END           [reduce using rule 68 (while_stmt)]
    IF              reduce using rule 31 (stmt)
    IF              [reduce using rule 68 (while_stmt)]
    ELSE            reduce using rule 31 (stmt)
    ELSE            [reduce using rule 68 (while_stmt)]
    WHILE           reduce using rule 31 (stmt)
    WHILE           [reduce using rule 68 (while_stmt)]
    FOR             reduce using rule 31 (stmt)
    FOR             [reduce using rule 68 (while_stmt)]
    DO              reduce using rule 31 (stmt)
    DO              [reduce using rule 68 (while_stmt)]
    CALL            reduce using rule 31 (stmt)
    CALL            [reduce using rule 68 (while_stmt)]
    RETURN          reduce using rule 31 (stmt)
    RETURN          [reduce using rule 68 (while_stmt)]
    VAR             reduce using rule 31 (stmt)
    VAR             [reduce using rule 68 (while_stmt)]
    NULLPTR         reduce using rule 31 (stmt)
    NULLPTR         [reduce using rule 68 (while_stmt)]
    LPAREN          reduce using rule 31 (stmt)
    LPAREN          [reduce using rule 68 (while_stmt)]
    LBRACK          reduce using rule 31 (stmt)
    LBRACK          [reduce using rule 68 (while_stmt)]
    $default        reduce using rule 31 (stmt)


State 165

   40 assignment: ID ASSIGN • expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 114


State 166

   41 assignment: ID LBRACK • expr RBRACK ASSIGN expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 186


State 167

   73 for_stmt: FOR LPAREN assignment expr • SEMICOLON update_expr RPAREN COLON block
   74         | FOR LPAREN assignment expr • SEMICOLON update_expr RPAREN COLON stmt
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR         shift, and go to state 96
    AND        shift, and go to state 97
    PLUS       shift, and go to state 98
    MINUS      shift, and go to state 99
    MULT       shift, and go to state 100
    DIV        shift, and go to state 101
    EQ         shift, and go to state 102
    NE         shift, and go to state 103
    GT         shift, and go to state 104
    GE         shift, and go to state 105
    LT         shift, and go to state 106
    LE         shift, and go to state 107
    SEMICOLON  shift, and go to state 187


State 168

   67 while_stmt: WHILE • COLON expr SEMICOLON
   68           | WHILE • expr COLON block
   69           | WHILE • expr COLON stmt
   70 do_while_stmt: DO COLON stmt_list WHILE • expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    COLON           shift, and go to state 82
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 188


State 169

   71 do_while_stmt: DO COLON stmt WHILE • expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 189


State 170

   72 do_while_stmt: DO COLON block WHILE • expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 190


State 171

   82 void_call: CALL ID LPAREN call_args • RPAREN SEMICOLON
  110 expr: CALL ID LPAREN call_args • RPAREN

    RPAREN  shift, and go to state 191


State 172

   46 type_decl: TYPE TYPE_INT COLON • ID SEMICOLON
   52          | TYPE TYPE_INT COLON • ID COLON NUM SEMICOLON

    ID  shift, and go to state 192


State 173

   48 type_decl: TYPE TYPE_CHAR COLON • ID SEMICOLON
   53          | TYPE TYPE_CHAR COLON • ID COLON CHAR_LITERAL SEMICOLON

    ID  shift, and go to state 193


State 174

   50 type_decl: TYPE TYPE_REAL COLON • ID SEMICOLON
   51          | TYPE TYPE_REAL COLON • ID COLON NUM SEMICOLON

    ID  shift, and go to state 194


State 175

   47 type_decl: TYPE TYPE_BOOL COLON • ID SEMICOLON
   55          | TYPE TYPE_BOOL COLON • ID COLON TRUE SEMICOLON
   56          | TYPE TYPE_BOOL COLON • ID COLON FALSE SEMICOLON

    ID  shift, and go to state 195


State 176

   49 type_decl: TYPE TYPE_STRING COLON • ID SEMICOLON
   54          | TYPE TYPE_STRING COLON • ID COLON STRING_LITERAL SEMICOLON
   57          | TYPE TYPE_STRING COLON • ID LBRACK NUM RBRACK SEMICOLON

    ID  shift, and go to state 196


State 177

    6 function: DEF ID LPAREN par_list RPAREN COLON RETURNS type $@1 stmt_list •
   26 stmt_list: stmt_list • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $end            reduce using rule 6 (function)
    $end            [reduce using rule 78 (call_args)]
    OR              [reduce using rule 6 (function)]
    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 6 (function)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 6 (function)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 6 (function)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 6 (function)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 6 (function)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 6 (function)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 6 (function)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 6 (function)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 6 (function)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 6 (function)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    T_END           reduce using rule 6 (function)
    T_END           [reduce using rule 78 (call_args)]
    IF              [reduce using rule 6 (function)]
    IF              [reduce using rule 78 (call_args)]
    ELSE            reduce using rule 6 (function)
    ELSE            [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 6 (function)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 6 (function)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 6 (function)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 6 (function)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 6 (function)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 6 (function)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 6 (function)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 6 (function)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 6 (function)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 6 (function)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 94
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 178

   98 expr: ID LBRACK expr RBRACK •

    $default  reduce using rule 98 (expr)


State 179

  110 expr: CALL ID LPAREN call_args • RPAREN

    RPAREN  shift, and go to state 197


State 180

   81 assignment_call: ID ASSIGN CALL ID LPAREN • call_args RPAREN SEMICOLON
  110 expr: CALL ID LPAREN • call_args RPAREN

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $default  reduce using rule 78 (call_args)

    call_args  go to state 198
    call_list  go to state 65
    expr       go to state 69


State 181

   41 assignment: ID LBRACK expr RBRACK ASSIGN • expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 199


State 182

   63 if_stmt: IF expr COLON stmt ELSE • COLON stmt

    COLON  shift, and go to state 200


State 183

   60 if_stmt: IF expr COLON block ELSE • COLON block

    COLON  shift, and go to state 201


State 184

   65 elif_list: ELIF • expr COLON block

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 202


State 185

   64 if_stmt: IF expr COLON block elif_list • ELSE COLON block
   66 elif_list: elif_list • ELIF expr COLON block

    ELSE  shift, and go to state 203
    ELIF  shift, and go to state 204


State 186

   41 assignment: ID LBRACK expr • RBRACK ASSIGN expr SEMICOLON
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR      shift, and go to state 96
    AND     shift, and go to state 97
    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MULT    shift, and go to state 100
    DIV     shift, and go to state 101
    EQ      shift, and go to state 102
    NE      shift, and go to state 103
    GT      shift, and go to state 104
    GE      shift, and go to state 105
    LT      shift, and go to state 106
    LE      shift, and go to state 107
    RBRACK  shift, and go to state 205


State 187

   73 for_stmt: FOR LPAREN assignment expr SEMICOLON • update_expr RPAREN COLON block
   74         | FOR LPAREN assignment expr SEMICOLON • update_expr RPAREN COLON stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 206
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    update_expr  go to state 207
    expr         go to state 208


State 188

   68 while_stmt: WHILE expr • COLON block
   69           | WHILE expr • COLON stmt
   70 do_while_stmt: DO COLON stmt_list WHILE expr • SEMICOLON
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR         shift, and go to state 96
    AND        shift, and go to state 97
    PLUS       shift, and go to state 98
    MINUS      shift, and go to state 99
    MULT       shift, and go to state 100
    DIV        shift, and go to state 101
    EQ         shift, and go to state 102
    NE         shift, and go to state 103
    GT         shift, and go to state 104
    GE         shift, and go to state 105
    LT         shift, and go to state 106
    LE         shift, and go to state 107
    COLON      shift, and go to state 121
    SEMICOLON  shift, and go to state 209


State 189

   71 do_while_stmt: DO COLON stmt WHILE expr • SEMICOLON
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR         shift, and go to state 96
    AND        shift, and go to state 97
    PLUS       shift, and go to state 98
    MINUS      shift, and go to state 99
    MULT       shift, and go to state 100
    DIV        shift, and go to state 101
    EQ         shift, and go to state 102
    NE         shift, and go to state 103
    GT         shift, and go to state 104
    GE         shift, and go to state 105
    LT         shift, and go to state 106
    LE         shift, and go to state 107
    SEMICOLON  shift, and go to state 210


State 190

   72 do_while_stmt: DO COLON block WHILE expr • SEMICOLON
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR         shift, and go to state 96
    AND        shift, and go to state 97
    PLUS       shift, and go to state 98
    MINUS      shift, and go to state 99
    MULT       shift, and go to state 100
    DIV        shift, and go to state 101
    EQ         shift, and go to state 102
    NE         shift, and go to state 103
    GT         shift, and go to state 104
    GE         shift, and go to state 105
    LT         shift, and go to state 106
    LE         shift, and go to state 107
    SEMICOLON  shift, and go to state 211


State 191

   82 void_call: CALL ID LPAREN call_args RPAREN • SEMICOLON
  110 expr: CALL ID LPAREN call_args RPAREN •

    SEMICOLON  shift, and go to state 212

    $default  reduce using rule 110 (expr)


State 192

   46 type_decl: TYPE TYPE_INT COLON ID • SEMICOLON
   52          | TYPE TYPE_INT COLON ID • COLON NUM SEMICOLON

    COLON      shift, and go to state 213
    SEMICOLON  shift, and go to state 214


State 193

   48 type_decl: TYPE TYPE_CHAR COLON ID • SEMICOLON
   53          | TYPE TYPE_CHAR COLON ID • COLON CHAR_LITERAL SEMICOLON

    COLON      shift, and go to state 215
    SEMICOLON  shift, and go to state 216


State 194

   50 type_decl: TYPE TYPE_REAL COLON ID • SEMICOLON
   51          | TYPE TYPE_REAL COLON ID • COLON NUM SEMICOLON

    COLON      shift, and go to state 217
    SEMICOLON  shift, and go to state 218


State 195

   47 type_decl: TYPE TYPE_BOOL COLON ID • SEMICOLON
   55          | TYPE TYPE_BOOL COLON ID • COLON TRUE SEMICOLON
   56          | TYPE TYPE_BOOL COLON ID • COLON FALSE SEMICOLON

    COLON      shift, and go to state 219
    SEMICOLON  shift, and go to state 220


State 196

   49 type_decl: TYPE TYPE_STRING COLON ID • SEMICOLON
   54          | TYPE TYPE_STRING COLON ID • COLON STRING_LITERAL SEMICOLON
   57          | TYPE TYPE_STRING COLON ID • LBRACK NUM RBRACK SEMICOLON

    COLON      shift, and go to state 221
    SEMICOLON  shift, and go to state 222
    LBRACK     shift, and go to state 223


State 197

  110 expr: CALL ID LPAREN call_args RPAREN •

    $default  reduce using rule 110 (expr)


State 198

   81 assignment_call: ID ASSIGN CALL ID LPAREN call_args • RPAREN SEMICOLON
  110 expr: CALL ID LPAREN call_args • RPAREN

    RPAREN  shift, and go to state 224


State 199

   41 assignment: ID LBRACK expr RBRACK ASSIGN expr • SEMICOLON
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR         shift, and go to state 96
    AND        shift, and go to state 97
    PLUS       shift, and go to state 98
    MINUS      shift, and go to state 99
    MULT       shift, and go to state 100
    DIV        shift, and go to state 101
    EQ         shift, and go to state 102
    NE         shift, and go to state 103
    GT         shift, and go to state 104
    GE         shift, and go to state 105
    LT         shift, and go to state 106
    LE         shift, and go to state 107
    SEMICOLON  shift, and go to state 225


State 200

   63 if_stmt: IF expr COLON stmt ELSE COLON • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 78 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 226
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 201

   60 if_stmt: IF expr COLON block ELSE COLON • block

    T_BEGIN  shift, and go to state 43

    block  go to state 227


State 202

   65 elif_list: ELIF expr • COLON block
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR     shift, and go to state 96
    AND    shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    MULT   shift, and go to state 100
    DIV    shift, and go to state 101
    EQ     shift, and go to state 102
    NE     shift, and go to state 103
    GT     shift, and go to state 104
    GE     shift, and go to state 105
    LT     shift, and go to state 106
    LE     shift, and go to state 107
    COLON  shift, and go to state 228


State 203

   64 if_stmt: IF expr COLON block elif_list ELSE • COLON block

    COLON  shift, and go to state 229


State 204

   66 elif_list: elif_list ELIF • expr COLON block

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 230


State 205

   41 assignment: ID LBRACK expr RBRACK • ASSIGN expr SEMICOLON

    ASSIGN  shift, and go to state 181


State 206

   75 update_expr: ID • ASSIGN expr
   98 expr: ID • LBRACK expr RBRACK
  101     | ID •
  111     | ID • LPAREN call_args RPAREN

    ASSIGN  shift, and go to state 231
    LPAREN  shift, and go to state 77
    LBRACK  shift, and go to state 111

    $default  reduce using rule 101 (expr)


State 207

   73 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr • RPAREN COLON block
   74         | FOR LPAREN assignment expr SEMICOLON update_expr • RPAREN COLON stmt

    RPAREN  shift, and go to state 232


State 208

   76 update_expr: expr •
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR     shift, and go to state 96
    AND    shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    MULT   shift, and go to state 100
    DIV    shift, and go to state 101
    EQ     shift, and go to state 102
    NE     shift, and go to state 103
    GT     shift, and go to state 104
    GE     shift, and go to state 105
    LT     shift, and go to state 106
    LE     shift, and go to state 107

    $default  reduce using rule 76 (update_expr)


State 209

   70 do_while_stmt: DO COLON stmt_list WHILE expr SEMICOLON •

    $default  reduce using rule 70 (do_while_stmt)


State 210

   71 do_while_stmt: DO COLON stmt WHILE expr SEMICOLON •

    $default  reduce using rule 71 (do_while_stmt)


State 211

   72 do_while_stmt: DO COLON block WHILE expr SEMICOLON •

    $default  reduce using rule 72 (do_while_stmt)


State 212

   82 void_call: CALL ID LPAREN call_args RPAREN SEMICOLON •

    $default  reduce using rule 82 (void_call)


State 213

   52 type_decl: TYPE TYPE_INT COLON ID COLON • NUM SEMICOLON

    NUM  shift, and go to state 233


State 214

   46 type_decl: TYPE TYPE_INT COLON ID SEMICOLON •

    $default  reduce using rule 46 (type_decl)


State 215

   53 type_decl: TYPE TYPE_CHAR COLON ID COLON • CHAR_LITERAL SEMICOLON

    CHAR_LITERAL  shift, and go to state 234


State 216

   48 type_decl: TYPE TYPE_CHAR COLON ID SEMICOLON •

    $default  reduce using rule 48 (type_decl)


State 217

   51 type_decl: TYPE TYPE_REAL COLON ID COLON • NUM SEMICOLON

    NUM  shift, and go to state 235


State 218

   50 type_decl: TYPE TYPE_REAL COLON ID SEMICOLON •

    $default  reduce using rule 50 (type_decl)


State 219

   55 type_decl: TYPE TYPE_BOOL COLON ID COLON • TRUE SEMICOLON
   56          | TYPE TYPE_BOOL COLON ID COLON • FALSE SEMICOLON

    TRUE   shift, and go to state 236
    FALSE  shift, and go to state 237


State 220

   47 type_decl: TYPE TYPE_BOOL COLON ID SEMICOLON •

    $default  reduce using rule 47 (type_decl)


State 221

   54 type_decl: TYPE TYPE_STRING COLON ID COLON • STRING_LITERAL SEMICOLON

    STRING_LITERAL  shift, and go to state 238


State 222

   49 type_decl: TYPE TYPE_STRING COLON ID SEMICOLON •

    $default  reduce using rule 49 (type_decl)


State 223

   57 type_decl: TYPE TYPE_STRING COLON ID LBRACK • NUM RBRACK SEMICOLON

    NUM  shift, and go to state 239


State 224

   81 assignment_call: ID ASSIGN CALL ID LPAREN call_args RPAREN • SEMICOLON
  110 expr: CALL ID LPAREN call_args RPAREN •

    SEMICOLON  shift, and go to state 240

    SEMICOLON  [reduce using rule 110 (expr)]
    $default   reduce using rule 110 (expr)


State 225

   41 assignment: ID LBRACK expr RBRACK ASSIGN expr SEMICOLON •

    $default  reduce using rule 41 (assignment)


State 226

   63 if_stmt: IF expr COLON stmt ELSE COLON stmt •

    $default  reduce using rule 63 (if_stmt)


State 227

   60 if_stmt: IF expr COLON block ELSE COLON block •

    $default  reduce using rule 60 (if_stmt)


State 228

   65 elif_list: ELIF expr COLON • block

    T_BEGIN  shift, and go to state 43

    block  go to state 241


State 229

   64 if_stmt: IF expr COLON block elif_list ELSE COLON • block

    T_BEGIN  shift, and go to state 43

    block  go to state 242


State 230

   66 elif_list: elif_list ELIF expr • COLON block
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR     shift, and go to state 96
    AND    shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    MULT   shift, and go to state 100
    DIV    shift, and go to state 101
    EQ     shift, and go to state 102
    NE     shift, and go to state 103
    GT     shift, and go to state 104
    GE     shift, and go to state 105
    LT     shift, and go to state 106
    LE     shift, and go to state 107
    COLON  shift, and go to state 243


State 231

   75 update_expr: ID ASSIGN • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 244


State 232

   73 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN • COLON block
   74         | FOR LPAREN assignment expr SEMICOLON update_expr RPAREN • COLON stmt

    COLON  shift, and go to state 245


State 233

   52 type_decl: TYPE TYPE_INT COLON ID COLON NUM • SEMICOLON

    SEMICOLON  shift, and go to state 246


State 234

   53 type_decl: TYPE TYPE_CHAR COLON ID COLON CHAR_LITERAL • SEMICOLON

    SEMICOLON  shift, and go to state 247


State 235

   51 type_decl: TYPE TYPE_REAL COLON ID COLON NUM • SEMICOLON

    SEMICOLON  shift, and go to state 248


State 236

   55 type_decl: TYPE TYPE_BOOL COLON ID COLON TRUE • SEMICOLON

    SEMICOLON  shift, and go to state 249


State 237

   56 type_decl: TYPE TYPE_BOOL COLON ID COLON FALSE • SEMICOLON

    SEMICOLON  shift, and go to state 250


State 238

   54 type_decl: TYPE TYPE_STRING COLON ID COLON STRING_LITERAL • SEMICOLON

    SEMICOLON  shift, and go to state 251


State 239

   57 type_decl: TYPE TYPE_STRING COLON ID LBRACK NUM • RBRACK SEMICOLON

    RBRACK  shift, and go to state 252


State 240

   81 assignment_call: ID ASSIGN CALL ID LPAREN call_args RPAREN SEMICOLON •

    $default  reduce using rule 81 (assignment_call)


State 241

   65 elif_list: ELIF expr COLON block •

    $default  reduce using rule 65 (elif_list)


State 242

   64 if_stmt: IF expr COLON block elif_list ELSE COLON block •

    $default  reduce using rule 64 (if_stmt)


State 243

   66 elif_list: elif_list ELIF expr COLON • block

    T_BEGIN  shift, and go to state 43

    block  go to state 253


State 244

   75 update_expr: ID ASSIGN expr •
   87 expr: expr • PLUS expr
   88     | expr • MINUS expr
   89     | expr • MULT expr
   90     | expr • DIV expr
   91     | expr • EQ expr
   92     | expr • NE expr
   93     | expr • LT expr
   94     | expr • GT expr
   95     | expr • LE expr
   96     | expr • GE expr
  112     | expr • AND expr
  113     | expr • OR expr

    OR     shift, and go to state 96
    AND    shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    MULT   shift, and go to state 100
    DIV    shift, and go to state 101
    EQ     shift, and go to state 102
    NE     shift, and go to state 103
    GT     shift, and go to state 104
    GE     shift, and go to state 105
    LT     shift, and go to state 106
    LE     shift, and go to state 107

    $default  reduce using rule 75 (update_expr)


State 245

   73 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON • block
   74         | FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 78 (call_args)]
    AND             [reduce using rule 78 (call_args)]
    NOT             [reduce using rule 78 (call_args)]
    ID              [reduce using rule 78 (call_args)]
    CHAR_LITERAL    [reduce using rule 78 (call_args)]
    STRING_LITERAL  [reduce using rule 78 (call_args)]
    NUM             [reduce using rule 78 (call_args)]
    TRUE            [reduce using rule 78 (call_args)]
    FALSE           [reduce using rule 78 (call_args)]
    DEF             [reduce using rule 78 (call_args)]
    T_BEGIN         [reduce using rule 78 (call_args)]
    IF              [reduce using rule 78 (call_args)]
    WHILE           [reduce using rule 78 (call_args)]
    FOR             [reduce using rule 78 (call_args)]
    DO              [reduce using rule 78 (call_args)]
    CALL            [reduce using rule 78 (call_args)]
    RETURN          [reduce using rule 78 (call_args)]
    VAR             [reduce using rule 78 (call_args)]
    NULLPTR         [reduce using rule 78 (call_args)]
    LPAREN          [reduce using rule 78 (call_args)]
    LBRACK          [reduce using rule 78 (call_args)]
    $default        reduce using rule 78 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 254
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 255
    expr             go to state 69


State 246

   52 type_decl: TYPE TYPE_INT COLON ID COLON NUM SEMICOLON •

    $default  reduce using rule 52 (type_decl)


State 247

   53 type_decl: TYPE TYPE_CHAR COLON ID COLON CHAR_LITERAL SEMICOLON •

    $default  reduce using rule 53 (type_decl)


State 248

   51 type_decl: TYPE TYPE_REAL COLON ID COLON NUM SEMICOLON •

    $default  reduce using rule 51 (type_decl)


State 249

   55 type_decl: TYPE TYPE_BOOL COLON ID COLON TRUE SEMICOLON •

    $default  reduce using rule 55 (type_decl)


State 250

   56 type_decl: TYPE TYPE_BOOL COLON ID COLON FALSE SEMICOLON •

    $default  reduce using rule 56 (type_decl)


State 251

   54 type_decl: TYPE TYPE_STRING COLON ID COLON STRING_LITERAL SEMICOLON •

    $default  reduce using rule 54 (type_decl)


State 252

   57 type_decl: TYPE TYPE_STRING COLON ID LBRACK NUM RBRACK • SEMICOLON

    SEMICOLON  shift, and go to state 256


State 253

   66 elif_list: elif_list ELIF expr COLON block •

    $default  reduce using rule 66 (elif_list)


State 254

   74 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON stmt •

    $default  reduce using rule 74 (for_stmt)


State 255

   31 stmt: block •
   73 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON block •

    $end            reduce using rule 31 (stmt)
    $end            [reduce using rule 73 (for_stmt)]
    OR              reduce using rule 31 (stmt)
    OR              [reduce using rule 73 (for_stmt)]
    AND             reduce using rule 31 (stmt)
    AND             [reduce using rule 73 (for_stmt)]
    NOT             reduce using rule 31 (stmt)
    NOT             [reduce using rule 73 (for_stmt)]
    ID              reduce using rule 31 (stmt)
    ID              [reduce using rule 73 (for_stmt)]
    CHAR_LITERAL    reduce using rule 31 (stmt)
    CHAR_LITERAL    [reduce using rule 73 (for_stmt)]
    STRING_LITERAL  reduce using rule 31 (stmt)
    STRING_LITERAL  [reduce using rule 73 (for_stmt)]
    NUM             reduce using rule 31 (stmt)
    NUM             [reduce using rule 73 (for_stmt)]
    TRUE            reduce using rule 31 (stmt)
    TRUE            [reduce using rule 73 (for_stmt)]
    FALSE           reduce using rule 31 (stmt)
    FALSE           [reduce using rule 73 (for_stmt)]
    DEF             reduce using rule 31 (stmt)
    DEF             [reduce using rule 73 (for_stmt)]
    T_BEGIN         reduce using rule 31 (stmt)
    T_BEGIN         [reduce using rule 73 (for_stmt)]
    T_END           reduce using rule 31 (stmt)
    T_END           [reduce using rule 73 (for_stmt)]
    IF              reduce using rule 31 (stmt)
    IF              [reduce using rule 73 (for_stmt)]
    ELSE            reduce using rule 31 (stmt)
    ELSE            [reduce using rule 73 (for_stmt)]
    WHILE           reduce using rule 31 (stmt)
    WHILE           [reduce using rule 73 (for_stmt)]
    FOR             reduce using rule 31 (stmt)
    FOR             [reduce using rule 73 (for_stmt)]
    DO              reduce using rule 31 (stmt)
    DO              [reduce using rule 73 (for_stmt)]
    CALL            reduce using rule 31 (stmt)
    CALL            [reduce using rule 73 (for_stmt)]
    RETURN          reduce using rule 31 (stmt)
    RETURN          [reduce using rule 73 (for_stmt)]
    VAR             reduce using rule 31 (stmt)
    VAR             [reduce using rule 73 (for_stmt)]
    NULLPTR         reduce using rule 31 (stmt)
    NULLPTR         [reduce using rule 73 (for_stmt)]
    LPAREN          reduce using rule 31 (stmt)
    LPAREN          [reduce using rule 73 (for_stmt)]
    LBRACK          reduce using rule 31 (stmt)
    LBRACK          [reduce using rule 73 (for_stmt)]
    $default        reduce using rule 31 (stmt)


State 256

   57 type_decl: TYPE TYPE_STRING COLON ID LBRACK NUM RBRACK SEMICOLON •

    $default  reduce using rule 57 (type_decl)
