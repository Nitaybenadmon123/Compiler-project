Terminals unused in grammar

    ADDRESS
    BAR


Rules useless in parser due to conflicts

   14 par_list: ε

   41 var_stmt: VAR type_decls block

   58 if_stmt: IF expr COLON block

   65 while_stmt: WHILE expr COLON block

   70 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON block

   82 $@6: ε


State 9 conflicts: 1 shift/reduce
State 29 conflicts: 21 shift/reduce
State 36 conflicts: 10 shift/reduce
State 37 conflicts: 1 shift/reduce
State 43 conflicts: 1 reduce/reduce
State 54 conflicts: 1 shift/reduce
State 55 conflicts: 21 shift/reduce, 24 reduce/reduce
State 69 conflicts: 2 shift/reduce
State 71 conflicts: 21 shift/reduce
State 72 conflicts: 21 shift/reduce
State 73 conflicts: 1 shift/reduce
State 78 conflicts: 21 shift/reduce
State 84 conflicts: 21 shift/reduce
State 89 conflicts: 21 shift/reduce
State 108 conflicts: 21 shift/reduce, 24 reduce/reduce
State 109 conflicts: 21 shift/reduce, 24 reduce/reduce
State 114 conflicts: 22 shift/reduce
State 116 conflicts: 21 shift/reduce
State 118 conflicts: 21 shift/reduce
State 121 conflicts: 21 shift/reduce
State 122 conflicts: 1 shift/reduce
State 123 conflicts: 1 shift/reduce
State 133 conflicts: 24 reduce/reduce
State 136 conflicts: 2 shift/reduce
State 149 conflicts: 21 shift/reduce
State 155 conflicts: 1 shift/reduce
State 156 conflicts: 1 shift/reduce, 24 reduce/reduce
State 159 conflicts: 24 reduce/reduce
State 171 conflicts: 21 shift/reduce, 24 reduce/reduce
State 190 conflicts: 21 shift/reduce
State 211 conflicts: 1 shift/reduce
State 229 conflicts: 21 shift/reduce
State 237 conflicts: 24 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: func_list
    2        | error

    3 func_list: func_list function
    4          | function

    5 $@1: ε

    6 function: DEF ID LPAREN par_list RPAREN COLON RETURNS type $@1 stmt_list

    7 $@2: ε

    8 function: DEF ID LPAREN RPAREN COLON RETURNS type $@2 stmt_list

    9 $@3: ε

   10 function: DEF ID LPAREN par_list RPAREN COLON $@3 stmt_list

   11 $@4: ε

   12 function: DEF ID LPAREN RPAREN COLON $@4 stmt_list

   13 par_list: param_list_item_list
   14         | ε

   15 param_list_item_list: param_list_item_list SEMICOLON par_list_item
   16                     | par_list_item

   17 par_list_item: ID type COLON ID

   18 type: TYPE_INT
   19     | TYPE_CHAR
   20     | TYPE_REAL
   21     | TYPE_BOOL
   22     | TYPE_STRING
   23     | TYPE_INT_PTR
   24     | TYPE_CHAR_PTR
   25     | TYPE_REAL_PTR

   26 stmt_list: stmt_list stmt
   27          | stmt

   28 stmt: assignment
   29     | if_stmt
   30     | return_stmt
   31     | block
   32     | while_stmt
   33     | for_stmt
   34     | call_args
   35     | do_while_stmt
   36     | var_stmt
   37     | void_call
   38     | assignment_call
   39     | func_list

   40 assignment: ID ASSIGN expr SEMICOLON

   41 var_stmt: VAR type_decls block
   42         | VAR type_decls stmt

   43 type_decls: type_decls type_decl
   44           | type_decl

   45 type_decl: TYPE TYPE_INT COLON ID SEMICOLON
   46          | TYPE TYPE_BOOL COLON ID SEMICOLON
   47          | TYPE TYPE_CHAR COLON ID SEMICOLON
   48          | TYPE TYPE_STRING COLON ID SEMICOLON
   49          | TYPE TYPE_REAL COLON ID SEMICOLON
   50          | TYPE TYPE_INT COLON ID COLON NUM SEMICOLON
   51          | TYPE TYPE_CHAR COLON ID COLON CHAR_LITERAL SEMICOLON
   52          | TYPE TYPE_STRING COLON ID COLON STRING_LITERAL SEMICOLON
   53          | TYPE TYPE_BOOL COLON ID COLON TRUE SEMICOLON
   54          | TYPE TYPE_BOOL COLON ID COLON FALSE SEMICOLON

   55 return_stmt: RETURN expr SEMICOLON
   56            | RETURN SEMICOLON

   57 if_stmt: IF expr COLON block ELSE COLON block
   58        | IF expr COLON block
   59        | IF expr COLON stmt
   60        | IF expr COLON stmt ELSE COLON stmt
   61        | IF expr COLON block elif_list ELSE COLON block

   62 elif_list: ELIF expr COLON block
   63          | elif_list ELIF expr COLON block

   64 while_stmt: WHILE COLON expr SEMICOLON
   65           | WHILE expr COLON block
   66           | WHILE expr COLON stmt

   67 do_while_stmt: DO COLON stmt_list WHILE expr SEMICOLON
   68              | DO COLON stmt WHILE expr SEMICOLON
   69              | DO COLON block WHILE expr SEMICOLON

   70 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON block
   71         | FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON stmt

   72 update_expr: ID ASSIGN expr
   73            | expr

   74 call_args: call_list
   75          | ε

   76 call_list: call_list COMMA expr
   77          | expr

   78 assignment_call: ID ASSIGN CALL ID LPAREN call_args RPAREN SEMICOLON

   79 void_call: CALL ID LPAREN call_args RPAREN SEMICOLON

   80 $@5: ε

   81 block: T_BEGIN $@5 stmt_list T_END

   82 $@6: ε

   83 block: T_BEGIN $@6 T_END

   84 expr: expr PLUS expr
   85     | expr MINUS expr
   86     | expr MULT expr
   87     | expr DIV expr
   88     | expr EQ expr
   89     | expr NE expr
   90     | expr LT expr
   91     | expr GT expr
   92     | expr LE expr
   93     | expr GE expr
   94     | LPAREN expr RPAREN
   95     | LBRACK expr RBRACK
   96     | NUM
   97     | ID
   98     | CHAR_LITERAL
   99     | STRING_LITERAL
  100     | NULLPTR
  101     | TRUE
  102     | FALSE
  103     | AND
  104     | OR
  105     | NOT
  106     | CALL ID LPAREN call_args RPAREN
  107     | ID LPAREN call_args RPAREN
  108     | expr AND expr
  109     | expr OR expr
  110     | NOT expr


Terminals, with rules where they appear

    $end (0) 0
    error (256) 2
    OR (258) 104 109
    AND (259) 103 108
    PLUS (260) 84
    MINUS (261) 85
    MULT (262) 86
    DIV (263) 87
    EQ (264) 88
    NE (265) 89
    GT (266) 91
    GE (267) 93
    LT (268) 90
    LE (269) 92
    NOT (270) 105 110
    ID <sval> (271) 6 8 10 12 17 40 45 46 47 48 49 50 51 52 53 54 72 78 79 97 106 107
    CHAR_LITERAL <sval> (272) 51 98
    STRING_LITERAL <sval> (273) 52 99
    NUM <sval> (274) 50 96
    TRUE <sval> (275) 53 101
    FALSE <sval> (276) 54 102
    TYPE_INT <sval> (277) 18 45 50
    TYPE_CHAR <sval> (278) 19 47 51
    TYPE_REAL <sval> (279) 20 49
    TYPE_BOOL <sval> (280) 21 46 53 54
    TYPE_STRING <sval> (281) 22 48 52
    TYPE_INT_PTR <sval> (282) 23
    TYPE_CHAR_PTR <sval> (283) 24
    TYPE_REAL_PTR <sval> (284) 25
    DEF (285) 6 8 10 12
    T_BEGIN (286) 81 83
    T_END (287) 81 83
    IF (288) 57 58 59 60 61
    ELSE (289) 57 60 61
    ELIF (290) 62 63
    WHILE (291) 64 65 66 67 68 69
    FOR (292) 70 71
    DO (293) 67 68 69
    CALL (294) 78 79 106
    RETURN (295) 55 56
    RETURNS (296) 6 8
    VAR (297) 41 42
    NULLPTR (298) 100
    ASSIGN (299) 40 72 78
    ADDRESS (300)
    COLON (301) 6 8 10 12 17 45 46 47 48 49 50 51 52 53 54 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
    SEMICOLON (302) 15 40 45 46 47 48 49 50 51 52 53 54 55 56 64 67 68 69 70 71 78 79
    COMMA (303) 76
    LPAREN (304) 6 8 10 12 70 71 78 79 94 106 107
    RPAREN (305) 6 8 10 12 70 71 78 79 94 106 107
    LBRACK (306) 95
    RBRACK (307) 95
    BAR (308)
    TYPE (309) 45 46 47 48 49 50 51 52 53 54


Nonterminals, with rules where they appear

    $accept (55)
        on left: 0
    program <ast> (56)
        on left: 1 2
        on right: 0
    func_list <ast> (57)
        on left: 3 4
        on right: 1 3 39
    function <ast> (58)
        on left: 6 8 10 12
        on right: 3 4
    $@1 (59)
        on left: 5
        on right: 6
    $@2 (60)
        on left: 7
        on right: 8
    $@3 (61)
        on left: 9
        on right: 10
    $@4 (62)
        on left: 11
        on right: 12
    par_list <ast> (63)
        on left: 13 14
        on right: 6 10
    param_list_item_list <ast> (64)
        on left: 15 16
        on right: 13 15
    par_list_item <ast> (65)
        on left: 17
        on right: 15 16
    type <ast> (66)
        on left: 18 19 20 21 22 23 24 25
        on right: 6 8 17
    stmt_list <ast> (67)
        on left: 26 27
        on right: 6 8 10 12 26 67 81
    stmt <ast> (68)
        on left: 28 29 30 31 32 33 34 35 36 37 38 39
        on right: 26 27 42 59 60 66 68 71
    assignment <ast> (69)
        on left: 40
        on right: 28 70 71
    var_stmt <ast> (70)
        on left: 41 42
        on right: 36
    type_decls <ast> (71)
        on left: 43 44
        on right: 41 42 43
    type_decl <ast> (72)
        on left: 45 46 47 48 49 50 51 52 53 54
        on right: 43 44
    return_stmt <ast> (73)
        on left: 55 56
        on right: 30
    if_stmt <ast> (74)
        on left: 57 58 59 60 61
        on right: 29
    elif_list <ast> (75)
        on left: 62 63
        on right: 61 63
    while_stmt <ast> (76)
        on left: 64 65 66
        on right: 32
    do_while_stmt <ast> (77)
        on left: 67 68 69
        on right: 35
    for_stmt <ast> (78)
        on left: 70 71
        on right: 33
    update_expr <ast> (79)
        on left: 72 73
        on right: 70 71
    call_args <ast> (80)
        on left: 74 75
        on right: 34 78 79 106 107
    call_list <ast> (81)
        on left: 76 77
        on right: 74 76
    assignment_call <ast> (82)
        on left: 78
        on right: 38
    void_call <ast> (83)
        on left: 79
        on right: 37
    block <ast> (84)
        on left: 81 83
        on right: 31 41 57 58 61 62 63 65 69 70
    $@5 (85)
        on left: 80
        on right: 81
    $@6 (86)
        on left: 82
        on right: 83
    expr <ast> (87)
        on left: 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110
        on right: 40 55 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 76 77 84 85 86 87 88 89 90 91 92 93 94 95 108 109 110


State 0

    0 $accept: • program $end

    error  shift, and go to state 1
    DEF    shift, and go to state 2

    program    go to state 3
    func_list  go to state 4
    function   go to state 5


State 1

    2 program: error •

    $default  reduce using rule 2 (program)


State 2

    6 function: DEF • ID LPAREN par_list RPAREN COLON RETURNS type $@1 stmt_list
    8         | DEF • ID LPAREN RPAREN COLON RETURNS type $@2 stmt_list
   10         | DEF • ID LPAREN par_list RPAREN COLON $@3 stmt_list
   12         | DEF • ID LPAREN RPAREN COLON $@4 stmt_list

    ID  shift, and go to state 6


State 3

    0 $accept: program • $end

    $end  shift, and go to state 7


State 4

    1 program: func_list •
    3 func_list: func_list • function

    DEF  shift, and go to state 2

    $default  reduce using rule 1 (program)

    function  go to state 8


State 5

    4 func_list: function •

    $default  reduce using rule 4 (func_list)


State 6

    6 function: DEF ID • LPAREN par_list RPAREN COLON RETURNS type $@1 stmt_list
    8         | DEF ID • LPAREN RPAREN COLON RETURNS type $@2 stmt_list
   10         | DEF ID • LPAREN par_list RPAREN COLON $@3 stmt_list
   12         | DEF ID • LPAREN RPAREN COLON $@4 stmt_list

    LPAREN  shift, and go to state 9


State 7

    0 $accept: program $end •

    $default  accept


State 8

    3 func_list: func_list function •

    $default  reduce using rule 3 (func_list)


State 9

    6 function: DEF ID LPAREN • par_list RPAREN COLON RETURNS type $@1 stmt_list
    8         | DEF ID LPAREN • RPAREN COLON RETURNS type $@2 stmt_list
   10         | DEF ID LPAREN • par_list RPAREN COLON $@3 stmt_list
   12         | DEF ID LPAREN • RPAREN COLON $@4 stmt_list

    ID      shift, and go to state 10
    RPAREN  shift, and go to state 11

    RPAREN  [reduce using rule 14 (par_list)]

    par_list              go to state 12
    param_list_item_list  go to state 13
    par_list_item         go to state 14


State 10

   17 par_list_item: ID • type COLON ID

    TYPE_INT       shift, and go to state 15
    TYPE_CHAR      shift, and go to state 16
    TYPE_REAL      shift, and go to state 17
    TYPE_BOOL      shift, and go to state 18
    TYPE_STRING    shift, and go to state 19
    TYPE_INT_PTR   shift, and go to state 20
    TYPE_CHAR_PTR  shift, and go to state 21
    TYPE_REAL_PTR  shift, and go to state 22

    type  go to state 23


State 11

    8 function: DEF ID LPAREN RPAREN • COLON RETURNS type $@2 stmt_list
   12         | DEF ID LPAREN RPAREN • COLON $@4 stmt_list

    COLON  shift, and go to state 24


State 12

    6 function: DEF ID LPAREN par_list • RPAREN COLON RETURNS type $@1 stmt_list
   10         | DEF ID LPAREN par_list • RPAREN COLON $@3 stmt_list

    RPAREN  shift, and go to state 25


State 13

   13 par_list: param_list_item_list •
   15 param_list_item_list: param_list_item_list • SEMICOLON par_list_item

    SEMICOLON  shift, and go to state 26

    $default  reduce using rule 13 (par_list)


State 14

   16 param_list_item_list: par_list_item •

    $default  reduce using rule 16 (param_list_item_list)


State 15

   18 type: TYPE_INT •

    $default  reduce using rule 18 (type)


State 16

   19 type: TYPE_CHAR •

    $default  reduce using rule 19 (type)


State 17

   20 type: TYPE_REAL •

    $default  reduce using rule 20 (type)


State 18

   21 type: TYPE_BOOL •

    $default  reduce using rule 21 (type)


State 19

   22 type: TYPE_STRING •

    $default  reduce using rule 22 (type)


State 20

   23 type: TYPE_INT_PTR •

    $default  reduce using rule 23 (type)


State 21

   24 type: TYPE_CHAR_PTR •

    $default  reduce using rule 24 (type)


State 22

   25 type: TYPE_REAL_PTR •

    $default  reduce using rule 25 (type)


State 23

   17 par_list_item: ID type • COLON ID

    COLON  shift, and go to state 27


State 24

    8 function: DEF ID LPAREN RPAREN COLON • RETURNS type $@2 stmt_list
   12         | DEF ID LPAREN RPAREN COLON • $@4 stmt_list

    RETURNS  shift, and go to state 28

    $default  reduce using rule 11 ($@4)

    $@4  go to state 29


State 25

    6 function: DEF ID LPAREN par_list RPAREN • COLON RETURNS type $@1 stmt_list
   10         | DEF ID LPAREN par_list RPAREN • COLON $@3 stmt_list

    COLON  shift, and go to state 30


State 26

   15 param_list_item_list: param_list_item_list SEMICOLON • par_list_item

    ID  shift, and go to state 10

    par_list_item  go to state 31


State 27

   17 par_list_item: ID type COLON • ID

    ID  shift, and go to state 32


State 28

    8 function: DEF ID LPAREN RPAREN COLON RETURNS • type $@2 stmt_list

    TYPE_INT       shift, and go to state 15
    TYPE_CHAR      shift, and go to state 16
    TYPE_REAL      shift, and go to state 17
    TYPE_BOOL      shift, and go to state 18
    TYPE_STRING    shift, and go to state 19
    TYPE_INT_PTR   shift, and go to state 20
    TYPE_CHAR_PTR  shift, and go to state 21
    TYPE_REAL_PTR  shift, and go to state 22

    type  go to state 33


State 29

   12 function: DEF ID LPAREN RPAREN COLON $@4 • stmt_list

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 75 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 55
    stmt             go to state 56
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 30

    6 function: DEF ID LPAREN par_list RPAREN COLON • RETURNS type $@1 stmt_list
   10         | DEF ID LPAREN par_list RPAREN COLON • $@3 stmt_list

    RETURNS  shift, and go to state 70

    $default  reduce using rule 9 ($@3)

    $@3  go to state 71


State 31

   15 param_list_item_list: param_list_item_list SEMICOLON par_list_item •

    $default  reduce using rule 15 (param_list_item_list)


State 32

   17 par_list_item: ID type COLON ID •

    $default  reduce using rule 17 (par_list_item)


State 33

    8 function: DEF ID LPAREN RPAREN COLON RETURNS type • $@2 stmt_list

    $default  reduce using rule 7 ($@2)

    $@2  go to state 72


State 34

  104 expr: OR •

    $default  reduce using rule 104 (expr)


State 35

  103 expr: AND •

    $default  reduce using rule 103 (expr)


State 36

  105 expr: NOT •
  110     | NOT • expr

    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    ID              [reduce using rule 105 (expr)]
    CHAR_LITERAL    [reduce using rule 105 (expr)]
    STRING_LITERAL  [reduce using rule 105 (expr)]
    NUM             [reduce using rule 105 (expr)]
    TRUE            [reduce using rule 105 (expr)]
    FALSE           [reduce using rule 105 (expr)]
    CALL            [reduce using rule 105 (expr)]
    NULLPTR         [reduce using rule 105 (expr)]
    LPAREN          [reduce using rule 105 (expr)]
    LBRACK          [reduce using rule 105 (expr)]
    $default        reduce using rule 105 (expr)

    expr  go to state 75


State 37

   40 assignment: ID • ASSIGN expr SEMICOLON
   78 assignment_call: ID • ASSIGN CALL ID LPAREN call_args RPAREN SEMICOLON
   97 expr: ID •
  107     | ID • LPAREN call_args RPAREN

    ASSIGN  shift, and go to state 76
    LPAREN  shift, and go to state 77

    LPAREN    [reduce using rule 97 (expr)]
    $default  reduce using rule 97 (expr)


State 38

   98 expr: CHAR_LITERAL •

    $default  reduce using rule 98 (expr)


State 39

   99 expr: STRING_LITERAL •

    $default  reduce using rule 99 (expr)


State 40

   96 expr: NUM •

    $default  reduce using rule 96 (expr)


State 41

  101 expr: TRUE •

    $default  reduce using rule 101 (expr)


State 42

  102 expr: FALSE •

    $default  reduce using rule 102 (expr)


State 43

   81 block: T_BEGIN • $@5 stmt_list T_END
   83      | T_BEGIN • $@6 T_END

    T_END     reduce using rule 80 ($@5)
    T_END     [reduce using rule 82 ($@6)]
    $default  reduce using rule 80 ($@5)

    $@5  go to state 78
    $@6  go to state 79


State 44

   57 if_stmt: IF • expr COLON block ELSE COLON block
   58        | IF • expr COLON block
   59        | IF • expr COLON stmt
   60        | IF • expr COLON stmt ELSE COLON stmt
   61        | IF • expr COLON block elif_list ELSE COLON block

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 80


State 45

   64 while_stmt: WHILE • COLON expr SEMICOLON
   65           | WHILE • expr COLON block
   66           | WHILE • expr COLON stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    COLON           shift, and go to state 81
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 82


State 46

   70 for_stmt: FOR • LPAREN assignment expr SEMICOLON update_expr RPAREN COLON block
   71         | FOR • LPAREN assignment expr SEMICOLON update_expr RPAREN COLON stmt

    LPAREN  shift, and go to state 83


State 47

   67 do_while_stmt: DO • COLON stmt_list WHILE expr SEMICOLON
   68              | DO • COLON stmt WHILE expr SEMICOLON
   69              | DO • COLON block WHILE expr SEMICOLON

    COLON  shift, and go to state 84


State 48

   79 void_call: CALL • ID LPAREN call_args RPAREN SEMICOLON
  106 expr: CALL • ID LPAREN call_args RPAREN

    ID  shift, and go to state 85


State 49

   55 return_stmt: RETURN • expr SEMICOLON
   56            | RETURN • SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    SEMICOLON       shift, and go to state 86
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 87


State 50

   41 var_stmt: VAR • type_decls block
   42         | VAR • type_decls stmt

    TYPE  shift, and go to state 88

    type_decls  go to state 89
    type_decl   go to state 90


State 51

  100 expr: NULLPTR •

    $default  reduce using rule 100 (expr)


State 52

   94 expr: LPAREN • expr RPAREN

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 91


State 53

   95 expr: LBRACK • expr RBRACK

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 92


State 54

    3 func_list: func_list • function
   39 stmt: func_list •

    DEF  shift, and go to state 2

    DEF       [reduce using rule 39 (stmt)]
    $default  reduce using rule 39 (stmt)

    function  go to state 8


State 55

   12 function: DEF ID LPAREN RPAREN COLON $@4 stmt_list •
   26 stmt_list: stmt_list • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $end            reduce using rule 12 (function)
    $end            [reduce using rule 75 (call_args)]
    OR              [reduce using rule 12 (function)]
    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 12 (function)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 12 (function)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 12 (function)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 12 (function)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 12 (function)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 12 (function)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 12 (function)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 12 (function)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 12 (function)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 12 (function)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    T_END           reduce using rule 12 (function)
    T_END           [reduce using rule 75 (call_args)]
    IF              [reduce using rule 12 (function)]
    IF              [reduce using rule 75 (call_args)]
    ELSE            reduce using rule 12 (function)
    ELSE            [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 12 (function)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 12 (function)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 12 (function)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 12 (function)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 12 (function)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 12 (function)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 12 (function)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 12 (function)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 12 (function)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 12 (function)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 93
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 56

   27 stmt_list: stmt •

    $default  reduce using rule 27 (stmt_list)


State 57

   28 stmt: assignment •

    $default  reduce using rule 28 (stmt)


State 58

   36 stmt: var_stmt •

    $default  reduce using rule 36 (stmt)


State 59

   30 stmt: return_stmt •

    $default  reduce using rule 30 (stmt)


State 60

   29 stmt: if_stmt •

    $default  reduce using rule 29 (stmt)


State 61

   32 stmt: while_stmt •

    $default  reduce using rule 32 (stmt)


State 62

   35 stmt: do_while_stmt •

    $default  reduce using rule 35 (stmt)


State 63

   33 stmt: for_stmt •

    $default  reduce using rule 33 (stmt)


State 64

   34 stmt: call_args •

    $default  reduce using rule 34 (stmt)


State 65

   74 call_args: call_list •
   76 call_list: call_list • COMMA expr

    COMMA  shift, and go to state 94

    $default  reduce using rule 74 (call_args)


State 66

   38 stmt: assignment_call •

    $default  reduce using rule 38 (stmt)


State 67

   37 stmt: void_call •

    $default  reduce using rule 37 (stmt)


State 68

   31 stmt: block •

    $default  reduce using rule 31 (stmt)


State 69

   77 call_list: expr •
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR     shift, and go to state 95
    AND    shift, and go to state 96
    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98
    MULT   shift, and go to state 99
    DIV    shift, and go to state 100
    EQ     shift, and go to state 101
    NE     shift, and go to state 102
    GT     shift, and go to state 103
    GE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106

    OR        [reduce using rule 77 (call_list)]
    AND       [reduce using rule 77 (call_list)]
    $default  reduce using rule 77 (call_list)


State 70

    6 function: DEF ID LPAREN par_list RPAREN COLON RETURNS • type $@1 stmt_list

    TYPE_INT       shift, and go to state 15
    TYPE_CHAR      shift, and go to state 16
    TYPE_REAL      shift, and go to state 17
    TYPE_BOOL      shift, and go to state 18
    TYPE_STRING    shift, and go to state 19
    TYPE_INT_PTR   shift, and go to state 20
    TYPE_CHAR_PTR  shift, and go to state 21
    TYPE_REAL_PTR  shift, and go to state 22

    type  go to state 107


State 71

   10 function: DEF ID LPAREN par_list RPAREN COLON $@3 • stmt_list

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 75 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 108
    stmt             go to state 56
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 72

    8 function: DEF ID LPAREN RPAREN COLON RETURNS type $@2 • stmt_list

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 75 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 109
    stmt             go to state 56
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 73

   97 expr: ID •
  107     | ID • LPAREN call_args RPAREN

    LPAREN  shift, and go to state 77

    LPAREN    [reduce using rule 97 (expr)]
    $default  reduce using rule 97 (expr)


State 74

  106 expr: CALL • ID LPAREN call_args RPAREN

    ID  shift, and go to state 110


State 75

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr
  110     | NOT expr •

    $default  reduce using rule 110 (expr)


State 76

   40 assignment: ID ASSIGN • expr SEMICOLON
   78 assignment_call: ID ASSIGN • CALL ID LPAREN call_args RPAREN SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 111
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 112


State 77

  107 expr: ID LPAREN • call_args RPAREN

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $default  reduce using rule 75 (call_args)

    call_args  go to state 113
    call_list  go to state 65
    expr       go to state 69


State 78

   81 block: T_BEGIN $@5 • stmt_list T_END

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 75 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 114
    stmt             go to state 56
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 79

   83 block: T_BEGIN $@6 • T_END

    T_END  shift, and go to state 115


State 80

   57 if_stmt: IF expr • COLON block ELSE COLON block
   58        | IF expr • COLON block
   59        | IF expr • COLON stmt
   60        | IF expr • COLON stmt ELSE COLON stmt
   61        | IF expr • COLON block elif_list ELSE COLON block
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR     shift, and go to state 95
    AND    shift, and go to state 96
    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98
    MULT   shift, and go to state 99
    DIV    shift, and go to state 100
    EQ     shift, and go to state 101
    NE     shift, and go to state 102
    GT     shift, and go to state 103
    GE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106
    COLON  shift, and go to state 116


State 81

   64 while_stmt: WHILE COLON • expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 117


State 82

   65 while_stmt: WHILE expr • COLON block
   66           | WHILE expr • COLON stmt
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR     shift, and go to state 95
    AND    shift, and go to state 96
    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98
    MULT   shift, and go to state 99
    DIV    shift, and go to state 100
    EQ     shift, and go to state 101
    NE     shift, and go to state 102
    GT     shift, and go to state 103
    GE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106
    COLON  shift, and go to state 118


State 83

   70 for_stmt: FOR LPAREN • assignment expr SEMICOLON update_expr RPAREN COLON block
   71         | FOR LPAREN • assignment expr SEMICOLON update_expr RPAREN COLON stmt

    ID  shift, and go to state 119

    assignment  go to state 120


State 84

   67 do_while_stmt: DO COLON • stmt_list WHILE expr SEMICOLON
   68              | DO COLON • stmt WHILE expr SEMICOLON
   69              | DO COLON • block WHILE expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 121
    stmt             go to state 122
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 123
    expr             go to state 69


State 85

   79 void_call: CALL ID • LPAREN call_args RPAREN SEMICOLON
  106 expr: CALL ID • LPAREN call_args RPAREN

    LPAREN  shift, and go to state 124


State 86

   56 return_stmt: RETURN SEMICOLON •

    $default  reduce using rule 56 (return_stmt)


State 87

   55 return_stmt: RETURN expr • SEMICOLON
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR         shift, and go to state 95
    AND        shift, and go to state 96
    PLUS       shift, and go to state 97
    MINUS      shift, and go to state 98
    MULT       shift, and go to state 99
    DIV        shift, and go to state 100
    EQ         shift, and go to state 101
    NE         shift, and go to state 102
    GT         shift, and go to state 103
    GE         shift, and go to state 104
    LT         shift, and go to state 105
    LE         shift, and go to state 106
    SEMICOLON  shift, and go to state 125


State 88

   45 type_decl: TYPE • TYPE_INT COLON ID SEMICOLON
   46          | TYPE • TYPE_BOOL COLON ID SEMICOLON
   47          | TYPE • TYPE_CHAR COLON ID SEMICOLON
   48          | TYPE • TYPE_STRING COLON ID SEMICOLON
   49          | TYPE • TYPE_REAL COLON ID SEMICOLON
   50          | TYPE • TYPE_INT COLON ID COLON NUM SEMICOLON
   51          | TYPE • TYPE_CHAR COLON ID COLON CHAR_LITERAL SEMICOLON
   52          | TYPE • TYPE_STRING COLON ID COLON STRING_LITERAL SEMICOLON
   53          | TYPE • TYPE_BOOL COLON ID COLON TRUE SEMICOLON
   54          | TYPE • TYPE_BOOL COLON ID COLON FALSE SEMICOLON

    TYPE_INT     shift, and go to state 126
    TYPE_CHAR    shift, and go to state 127
    TYPE_REAL    shift, and go to state 128
    TYPE_BOOL    shift, and go to state 129
    TYPE_STRING  shift, and go to state 130


State 89

   41 var_stmt: VAR type_decls • block
   42         | VAR type_decls • stmt
   43 type_decls: type_decls • type_decl

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53
    TYPE            shift, and go to state 88

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 75 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 131
    assignment       go to state 57
    var_stmt         go to state 58
    type_decl        go to state 132
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 133
    expr             go to state 69


State 90

   44 type_decls: type_decl •

    $default  reduce using rule 44 (type_decls)


State 91

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
   94     | LPAREN expr • RPAREN
  108     | expr • AND expr
  109     | expr • OR expr

    OR      shift, and go to state 95
    AND     shift, and go to state 96
    PLUS    shift, and go to state 97
    MINUS   shift, and go to state 98
    MULT    shift, and go to state 99
    DIV     shift, and go to state 100
    EQ      shift, and go to state 101
    NE      shift, and go to state 102
    GT      shift, and go to state 103
    GE      shift, and go to state 104
    LT      shift, and go to state 105
    LE      shift, and go to state 106
    RPAREN  shift, and go to state 134


State 92

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
   95     | LBRACK expr • RBRACK
  108     | expr • AND expr
  109     | expr • OR expr

    OR      shift, and go to state 95
    AND     shift, and go to state 96
    PLUS    shift, and go to state 97
    MINUS   shift, and go to state 98
    MULT    shift, and go to state 99
    DIV     shift, and go to state 100
    EQ      shift, and go to state 101
    NE      shift, and go to state 102
    GT      shift, and go to state 103
    GE      shift, and go to state 104
    LT      shift, and go to state 105
    LE      shift, and go to state 106
    RBRACK  shift, and go to state 135


State 93

   26 stmt_list: stmt_list stmt •

    $default  reduce using rule 26 (stmt_list)


State 94

   76 call_list: call_list COMMA • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 136


State 95

  109 expr: expr OR • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 137


State 96

  108 expr: expr AND • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 138


State 97

   84 expr: expr PLUS • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 139


State 98

   85 expr: expr MINUS • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 140


State 99

   86 expr: expr MULT • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 141


State 100

   87 expr: expr DIV • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 142


State 101

   88 expr: expr EQ • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 143


State 102

   89 expr: expr NE • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 144


State 103

   91 expr: expr GT • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 145


State 104

   93 expr: expr GE • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 146


State 105

   90 expr: expr LT • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 147


State 106

   92 expr: expr LE • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 148


State 107

    6 function: DEF ID LPAREN par_list RPAREN COLON RETURNS type • $@1 stmt_list

    $default  reduce using rule 5 ($@1)

    $@1  go to state 149


State 108

   10 function: DEF ID LPAREN par_list RPAREN COLON $@3 stmt_list •
   26 stmt_list: stmt_list • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $end            reduce using rule 10 (function)
    $end            [reduce using rule 75 (call_args)]
    OR              [reduce using rule 10 (function)]
    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 10 (function)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 10 (function)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 10 (function)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 10 (function)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 10 (function)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 10 (function)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 10 (function)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 10 (function)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 10 (function)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 10 (function)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    T_END           reduce using rule 10 (function)
    T_END           [reduce using rule 75 (call_args)]
    IF              [reduce using rule 10 (function)]
    IF              [reduce using rule 75 (call_args)]
    ELSE            reduce using rule 10 (function)
    ELSE            [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 10 (function)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 10 (function)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 10 (function)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 10 (function)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 10 (function)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 10 (function)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 10 (function)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 10 (function)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 10 (function)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 10 (function)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 93
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 109

    8 function: DEF ID LPAREN RPAREN COLON RETURNS type $@2 stmt_list •
   26 stmt_list: stmt_list • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $end            reduce using rule 8 (function)
    $end            [reduce using rule 75 (call_args)]
    OR              [reduce using rule 8 (function)]
    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 8 (function)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 8 (function)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 8 (function)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 8 (function)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 8 (function)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 8 (function)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 8 (function)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 8 (function)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 8 (function)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 8 (function)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    T_END           reduce using rule 8 (function)
    T_END           [reduce using rule 75 (call_args)]
    IF              [reduce using rule 8 (function)]
    IF              [reduce using rule 75 (call_args)]
    ELSE            reduce using rule 8 (function)
    ELSE            [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 8 (function)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 8 (function)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 8 (function)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 8 (function)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 8 (function)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 8 (function)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 8 (function)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 8 (function)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 8 (function)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 8 (function)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 93
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 110

  106 expr: CALL ID • LPAREN call_args RPAREN

    LPAREN  shift, and go to state 150


State 111

   78 assignment_call: ID ASSIGN CALL • ID LPAREN call_args RPAREN SEMICOLON
  106 expr: CALL • ID LPAREN call_args RPAREN

    ID  shift, and go to state 151


State 112

   40 assignment: ID ASSIGN expr • SEMICOLON
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR         shift, and go to state 95
    AND        shift, and go to state 96
    PLUS       shift, and go to state 97
    MINUS      shift, and go to state 98
    MULT       shift, and go to state 99
    DIV        shift, and go to state 100
    EQ         shift, and go to state 101
    NE         shift, and go to state 102
    GT         shift, and go to state 103
    GE         shift, and go to state 104
    LT         shift, and go to state 105
    LE         shift, and go to state 106
    SEMICOLON  shift, and go to state 152


State 113

  107 expr: ID LPAREN call_args • RPAREN

    RPAREN  shift, and go to state 153


State 114

   26 stmt_list: stmt_list • stmt
   81 block: T_BEGIN $@5 stmt_list • T_END

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    T_END           shift, and go to state 154
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    T_END           [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 93
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 115

   83 block: T_BEGIN $@6 T_END •

    $default  reduce using rule 83 (block)


State 116

   57 if_stmt: IF expr COLON • block ELSE COLON block
   58        | IF expr COLON • block
   59        | IF expr COLON • stmt
   60        | IF expr COLON • stmt ELSE COLON stmt
   61        | IF expr COLON • block elif_list ELSE COLON block

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 75 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 155
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 156
    expr             go to state 69


State 117

   64 while_stmt: WHILE COLON expr • SEMICOLON
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR         shift, and go to state 95
    AND        shift, and go to state 96
    PLUS       shift, and go to state 97
    MINUS      shift, and go to state 98
    MULT       shift, and go to state 99
    DIV        shift, and go to state 100
    EQ         shift, and go to state 101
    NE         shift, and go to state 102
    GT         shift, and go to state 103
    GE         shift, and go to state 104
    LT         shift, and go to state 105
    LE         shift, and go to state 106
    SEMICOLON  shift, and go to state 157


State 118

   65 while_stmt: WHILE expr COLON • block
   66           | WHILE expr COLON • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 75 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 158
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 159
    expr             go to state 69


State 119

   40 assignment: ID • ASSIGN expr SEMICOLON

    ASSIGN  shift, and go to state 160


State 120

   70 for_stmt: FOR LPAREN assignment • expr SEMICOLON update_expr RPAREN COLON block
   71         | FOR LPAREN assignment • expr SEMICOLON update_expr RPAREN COLON stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 161


State 121

   26 stmt_list: stmt_list • stmt
   67 do_while_stmt: DO COLON stmt_list • WHILE expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 162
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 93
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 122

   27 stmt_list: stmt •
   68 do_while_stmt: DO COLON stmt • WHILE expr SEMICOLON

    WHILE  shift, and go to state 163

    WHILE     [reduce using rule 27 (stmt_list)]
    $default  reduce using rule 27 (stmt_list)


State 123

   31 stmt: block •
   69 do_while_stmt: DO COLON block • WHILE expr SEMICOLON

    WHILE  shift, and go to state 164

    WHILE     [reduce using rule 31 (stmt)]
    $default  reduce using rule 31 (stmt)


State 124

   79 void_call: CALL ID LPAREN • call_args RPAREN SEMICOLON
  106 expr: CALL ID LPAREN • call_args RPAREN

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $default  reduce using rule 75 (call_args)

    call_args  go to state 165
    call_list  go to state 65
    expr       go to state 69


State 125

   55 return_stmt: RETURN expr SEMICOLON •

    $default  reduce using rule 55 (return_stmt)


State 126

   45 type_decl: TYPE TYPE_INT • COLON ID SEMICOLON
   50          | TYPE TYPE_INT • COLON ID COLON NUM SEMICOLON

    COLON  shift, and go to state 166


State 127

   47 type_decl: TYPE TYPE_CHAR • COLON ID SEMICOLON
   51          | TYPE TYPE_CHAR • COLON ID COLON CHAR_LITERAL SEMICOLON

    COLON  shift, and go to state 167


State 128

   49 type_decl: TYPE TYPE_REAL • COLON ID SEMICOLON

    COLON  shift, and go to state 168


State 129

   46 type_decl: TYPE TYPE_BOOL • COLON ID SEMICOLON
   53          | TYPE TYPE_BOOL • COLON ID COLON TRUE SEMICOLON
   54          | TYPE TYPE_BOOL • COLON ID COLON FALSE SEMICOLON

    COLON  shift, and go to state 169


State 130

   48 type_decl: TYPE TYPE_STRING • COLON ID SEMICOLON
   52          | TYPE TYPE_STRING • COLON ID COLON STRING_LITERAL SEMICOLON

    COLON  shift, and go to state 170


State 131

   42 var_stmt: VAR type_decls stmt •

    $default  reduce using rule 42 (var_stmt)


State 132

   43 type_decls: type_decls type_decl •

    $default  reduce using rule 43 (type_decls)


State 133

   31 stmt: block •
   41 var_stmt: VAR type_decls block •

    $end            reduce using rule 31 (stmt)
    $end            [reduce using rule 41 (var_stmt)]
    OR              reduce using rule 31 (stmt)
    OR              [reduce using rule 41 (var_stmt)]
    AND             reduce using rule 31 (stmt)
    AND             [reduce using rule 41 (var_stmt)]
    NOT             reduce using rule 31 (stmt)
    NOT             [reduce using rule 41 (var_stmt)]
    ID              reduce using rule 31 (stmt)
    ID              [reduce using rule 41 (var_stmt)]
    CHAR_LITERAL    reduce using rule 31 (stmt)
    CHAR_LITERAL    [reduce using rule 41 (var_stmt)]
    STRING_LITERAL  reduce using rule 31 (stmt)
    STRING_LITERAL  [reduce using rule 41 (var_stmt)]
    NUM             reduce using rule 31 (stmt)
    NUM             [reduce using rule 41 (var_stmt)]
    TRUE            reduce using rule 31 (stmt)
    TRUE            [reduce using rule 41 (var_stmt)]
    FALSE           reduce using rule 31 (stmt)
    FALSE           [reduce using rule 41 (var_stmt)]
    DEF             reduce using rule 31 (stmt)
    DEF             [reduce using rule 41 (var_stmt)]
    T_BEGIN         reduce using rule 31 (stmt)
    T_BEGIN         [reduce using rule 41 (var_stmt)]
    T_END           reduce using rule 31 (stmt)
    T_END           [reduce using rule 41 (var_stmt)]
    IF              reduce using rule 31 (stmt)
    IF              [reduce using rule 41 (var_stmt)]
    ELSE            reduce using rule 31 (stmt)
    ELSE            [reduce using rule 41 (var_stmt)]
    WHILE           reduce using rule 31 (stmt)
    WHILE           [reduce using rule 41 (var_stmt)]
    FOR             reduce using rule 31 (stmt)
    FOR             [reduce using rule 41 (var_stmt)]
    DO              reduce using rule 31 (stmt)
    DO              [reduce using rule 41 (var_stmt)]
    CALL            reduce using rule 31 (stmt)
    CALL            [reduce using rule 41 (var_stmt)]
    RETURN          reduce using rule 31 (stmt)
    RETURN          [reduce using rule 41 (var_stmt)]
    VAR             reduce using rule 31 (stmt)
    VAR             [reduce using rule 41 (var_stmt)]
    NULLPTR         reduce using rule 31 (stmt)
    NULLPTR         [reduce using rule 41 (var_stmt)]
    LPAREN          reduce using rule 31 (stmt)
    LPAREN          [reduce using rule 41 (var_stmt)]
    LBRACK          reduce using rule 31 (stmt)
    LBRACK          [reduce using rule 41 (var_stmt)]
    $default        reduce using rule 31 (stmt)


State 134

   94 expr: LPAREN expr RPAREN •

    $default  reduce using rule 94 (expr)


State 135

   95 expr: LBRACK expr RBRACK •

    $default  reduce using rule 95 (expr)


State 136

   76 call_list: call_list COMMA expr •
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR     shift, and go to state 95
    AND    shift, and go to state 96
    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98
    MULT   shift, and go to state 99
    DIV    shift, and go to state 100
    EQ     shift, and go to state 101
    NE     shift, and go to state 102
    GT     shift, and go to state 103
    GE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106

    OR        [reduce using rule 76 (call_list)]
    AND       [reduce using rule 76 (call_list)]
    $default  reduce using rule 76 (call_list)


State 137

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr
  109     | expr OR expr •

    AND    shift, and go to state 96
    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98
    MULT   shift, and go to state 99
    DIV    shift, and go to state 100
    EQ     shift, and go to state 101
    NE     shift, and go to state 102
    GT     shift, and go to state 103
    GE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106

    $default  reduce using rule 109 (expr)


State 138

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  108     | expr AND expr •
  109     | expr • OR expr

    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98
    MULT   shift, and go to state 99
    DIV    shift, and go to state 100
    EQ     shift, and go to state 101
    NE     shift, and go to state 102
    GT     shift, and go to state 103
    GE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106

    $default  reduce using rule 108 (expr)


State 139

   84 expr: expr • PLUS expr
   84     | expr PLUS expr •
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    MULT  shift, and go to state 99
    DIV   shift, and go to state 100
    EQ    shift, and go to state 101
    NE    shift, and go to state 102
    GT    shift, and go to state 103
    GE    shift, and go to state 104
    LT    shift, and go to state 105
    LE    shift, and go to state 106

    $default  reduce using rule 84 (expr)


State 140

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   85     | expr MINUS expr •
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    MULT  shift, and go to state 99
    DIV   shift, and go to state 100
    EQ    shift, and go to state 101
    NE    shift, and go to state 102
    GT    shift, and go to state 103
    GE    shift, and go to state 104
    LT    shift, and go to state 105
    LE    shift, and go to state 106

    $default  reduce using rule 85 (expr)


State 141

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   86     | expr MULT expr •
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    EQ  shift, and go to state 101
    NE  shift, and go to state 102
    GT  shift, and go to state 103
    GE  shift, and go to state 104
    LT  shift, and go to state 105
    LE  shift, and go to state 106

    $default  reduce using rule 86 (expr)


State 142

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   87     | expr DIV expr •
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    EQ  shift, and go to state 101
    NE  shift, and go to state 102
    GT  shift, and go to state 103
    GE  shift, and go to state 104
    LT  shift, and go to state 105
    LE  shift, and go to state 106

    $default  reduce using rule 87 (expr)


State 143

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   88     | expr EQ expr •
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    $default  reduce using rule 88 (expr)


State 144

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   89     | expr NE expr •
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    $default  reduce using rule 89 (expr)


State 145

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   91     | expr GT expr •
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    $default  reduce using rule 91 (expr)


State 146

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
   93     | expr GE expr •
  108     | expr • AND expr
  109     | expr • OR expr

    $default  reduce using rule 93 (expr)


State 147

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   90     | expr LT expr •
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    $default  reduce using rule 90 (expr)


State 148

   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   92     | expr LE expr •
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    $default  reduce using rule 92 (expr)


State 149

    6 function: DEF ID LPAREN par_list RPAREN COLON RETURNS type $@1 • stmt_list

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 75 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt_list        go to state 171
    stmt             go to state 56
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 150

  106 expr: CALL ID LPAREN • call_args RPAREN

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $default  reduce using rule 75 (call_args)

    call_args  go to state 172
    call_list  go to state 65
    expr       go to state 69


State 151

   78 assignment_call: ID ASSIGN CALL ID • LPAREN call_args RPAREN SEMICOLON
  106 expr: CALL ID • LPAREN call_args RPAREN

    LPAREN  shift, and go to state 173


State 152

   40 assignment: ID ASSIGN expr SEMICOLON •

    $default  reduce using rule 40 (assignment)


State 153

  107 expr: ID LPAREN call_args RPAREN •

    $default  reduce using rule 107 (expr)


State 154

   81 block: T_BEGIN $@5 stmt_list T_END •

    $default  reduce using rule 81 (block)


State 155

   59 if_stmt: IF expr COLON stmt •
   60        | IF expr COLON stmt • ELSE COLON stmt

    ELSE  shift, and go to state 174

    ELSE      [reduce using rule 59 (if_stmt)]
    $default  reduce using rule 59 (if_stmt)


State 156

   31 stmt: block •
   57 if_stmt: IF expr COLON block • ELSE COLON block
   58        | IF expr COLON block •
   61        | IF expr COLON block • elif_list ELSE COLON block

    ELSE  shift, and go to state 175
    ELIF  shift, and go to state 176

    $end            reduce using rule 31 (stmt)
    $end            [reduce using rule 58 (if_stmt)]
    OR              reduce using rule 31 (stmt)
    OR              [reduce using rule 58 (if_stmt)]
    AND             reduce using rule 31 (stmt)
    AND             [reduce using rule 58 (if_stmt)]
    NOT             reduce using rule 31 (stmt)
    NOT             [reduce using rule 58 (if_stmt)]
    ID              reduce using rule 31 (stmt)
    ID              [reduce using rule 58 (if_stmt)]
    CHAR_LITERAL    reduce using rule 31 (stmt)
    CHAR_LITERAL    [reduce using rule 58 (if_stmt)]
    STRING_LITERAL  reduce using rule 31 (stmt)
    STRING_LITERAL  [reduce using rule 58 (if_stmt)]
    NUM             reduce using rule 31 (stmt)
    NUM             [reduce using rule 58 (if_stmt)]
    TRUE            reduce using rule 31 (stmt)
    TRUE            [reduce using rule 58 (if_stmt)]
    FALSE           reduce using rule 31 (stmt)
    FALSE           [reduce using rule 58 (if_stmt)]
    DEF             reduce using rule 31 (stmt)
    DEF             [reduce using rule 58 (if_stmt)]
    T_BEGIN         reduce using rule 31 (stmt)
    T_BEGIN         [reduce using rule 58 (if_stmt)]
    T_END           reduce using rule 31 (stmt)
    T_END           [reduce using rule 58 (if_stmt)]
    IF              reduce using rule 31 (stmt)
    IF              [reduce using rule 58 (if_stmt)]
    ELSE            [reduce using rule 31 (stmt)]
    ELSE            [reduce using rule 58 (if_stmt)]
    WHILE           reduce using rule 31 (stmt)
    WHILE           [reduce using rule 58 (if_stmt)]
    FOR             reduce using rule 31 (stmt)
    FOR             [reduce using rule 58 (if_stmt)]
    DO              reduce using rule 31 (stmt)
    DO              [reduce using rule 58 (if_stmt)]
    CALL            reduce using rule 31 (stmt)
    CALL            [reduce using rule 58 (if_stmt)]
    RETURN          reduce using rule 31 (stmt)
    RETURN          [reduce using rule 58 (if_stmt)]
    VAR             reduce using rule 31 (stmt)
    VAR             [reduce using rule 58 (if_stmt)]
    NULLPTR         reduce using rule 31 (stmt)
    NULLPTR         [reduce using rule 58 (if_stmt)]
    LPAREN          reduce using rule 31 (stmt)
    LPAREN          [reduce using rule 58 (if_stmt)]
    LBRACK          reduce using rule 31 (stmt)
    LBRACK          [reduce using rule 58 (if_stmt)]
    $default        reduce using rule 31 (stmt)

    elif_list  go to state 177


State 157

   64 while_stmt: WHILE COLON expr SEMICOLON •

    $default  reduce using rule 64 (while_stmt)


State 158

   66 while_stmt: WHILE expr COLON stmt •

    $default  reduce using rule 66 (while_stmt)


State 159

   31 stmt: block •
   65 while_stmt: WHILE expr COLON block •

    $end            reduce using rule 31 (stmt)
    $end            [reduce using rule 65 (while_stmt)]
    OR              reduce using rule 31 (stmt)
    OR              [reduce using rule 65 (while_stmt)]
    AND             reduce using rule 31 (stmt)
    AND             [reduce using rule 65 (while_stmt)]
    NOT             reduce using rule 31 (stmt)
    NOT             [reduce using rule 65 (while_stmt)]
    ID              reduce using rule 31 (stmt)
    ID              [reduce using rule 65 (while_stmt)]
    CHAR_LITERAL    reduce using rule 31 (stmt)
    CHAR_LITERAL    [reduce using rule 65 (while_stmt)]
    STRING_LITERAL  reduce using rule 31 (stmt)
    STRING_LITERAL  [reduce using rule 65 (while_stmt)]
    NUM             reduce using rule 31 (stmt)
    NUM             [reduce using rule 65 (while_stmt)]
    TRUE            reduce using rule 31 (stmt)
    TRUE            [reduce using rule 65 (while_stmt)]
    FALSE           reduce using rule 31 (stmt)
    FALSE           [reduce using rule 65 (while_stmt)]
    DEF             reduce using rule 31 (stmt)
    DEF             [reduce using rule 65 (while_stmt)]
    T_BEGIN         reduce using rule 31 (stmt)
    T_BEGIN         [reduce using rule 65 (while_stmt)]
    T_END           reduce using rule 31 (stmt)
    T_END           [reduce using rule 65 (while_stmt)]
    IF              reduce using rule 31 (stmt)
    IF              [reduce using rule 65 (while_stmt)]
    ELSE            reduce using rule 31 (stmt)
    ELSE            [reduce using rule 65 (while_stmt)]
    WHILE           reduce using rule 31 (stmt)
    WHILE           [reduce using rule 65 (while_stmt)]
    FOR             reduce using rule 31 (stmt)
    FOR             [reduce using rule 65 (while_stmt)]
    DO              reduce using rule 31 (stmt)
    DO              [reduce using rule 65 (while_stmt)]
    CALL            reduce using rule 31 (stmt)
    CALL            [reduce using rule 65 (while_stmt)]
    RETURN          reduce using rule 31 (stmt)
    RETURN          [reduce using rule 65 (while_stmt)]
    VAR             reduce using rule 31 (stmt)
    VAR             [reduce using rule 65 (while_stmt)]
    NULLPTR         reduce using rule 31 (stmt)
    NULLPTR         [reduce using rule 65 (while_stmt)]
    LPAREN          reduce using rule 31 (stmt)
    LPAREN          [reduce using rule 65 (while_stmt)]
    LBRACK          reduce using rule 31 (stmt)
    LBRACK          [reduce using rule 65 (while_stmt)]
    $default        reduce using rule 31 (stmt)


State 160

   40 assignment: ID ASSIGN • expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 112


State 161

   70 for_stmt: FOR LPAREN assignment expr • SEMICOLON update_expr RPAREN COLON block
   71         | FOR LPAREN assignment expr • SEMICOLON update_expr RPAREN COLON stmt
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR         shift, and go to state 95
    AND        shift, and go to state 96
    PLUS       shift, and go to state 97
    MINUS      shift, and go to state 98
    MULT       shift, and go to state 99
    DIV        shift, and go to state 100
    EQ         shift, and go to state 101
    NE         shift, and go to state 102
    GT         shift, and go to state 103
    GE         shift, and go to state 104
    LT         shift, and go to state 105
    LE         shift, and go to state 106
    SEMICOLON  shift, and go to state 178


State 162

   64 while_stmt: WHILE • COLON expr SEMICOLON
   65           | WHILE • expr COLON block
   66           | WHILE • expr COLON stmt
   67 do_while_stmt: DO COLON stmt_list WHILE • expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    COLON           shift, and go to state 81
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 179


State 163

   68 do_while_stmt: DO COLON stmt WHILE • expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 180


State 164

   69 do_while_stmt: DO COLON block WHILE • expr SEMICOLON

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 181


State 165

   79 void_call: CALL ID LPAREN call_args • RPAREN SEMICOLON
  106 expr: CALL ID LPAREN call_args • RPAREN

    RPAREN  shift, and go to state 182


State 166

   45 type_decl: TYPE TYPE_INT COLON • ID SEMICOLON
   50          | TYPE TYPE_INT COLON • ID COLON NUM SEMICOLON

    ID  shift, and go to state 183


State 167

   47 type_decl: TYPE TYPE_CHAR COLON • ID SEMICOLON
   51          | TYPE TYPE_CHAR COLON • ID COLON CHAR_LITERAL SEMICOLON

    ID  shift, and go to state 184


State 168

   49 type_decl: TYPE TYPE_REAL COLON • ID SEMICOLON

    ID  shift, and go to state 185


State 169

   46 type_decl: TYPE TYPE_BOOL COLON • ID SEMICOLON
   53          | TYPE TYPE_BOOL COLON • ID COLON TRUE SEMICOLON
   54          | TYPE TYPE_BOOL COLON • ID COLON FALSE SEMICOLON

    ID  shift, and go to state 186


State 170

   48 type_decl: TYPE TYPE_STRING COLON • ID SEMICOLON
   52          | TYPE TYPE_STRING COLON • ID COLON STRING_LITERAL SEMICOLON

    ID  shift, and go to state 187


State 171

    6 function: DEF ID LPAREN par_list RPAREN COLON RETURNS type $@1 stmt_list •
   26 stmt_list: stmt_list • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $end            reduce using rule 6 (function)
    $end            [reduce using rule 75 (call_args)]
    OR              [reduce using rule 6 (function)]
    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 6 (function)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 6 (function)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 6 (function)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 6 (function)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 6 (function)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 6 (function)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 6 (function)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 6 (function)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 6 (function)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 6 (function)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    T_END           reduce using rule 6 (function)
    T_END           [reduce using rule 75 (call_args)]
    IF              [reduce using rule 6 (function)]
    IF              [reduce using rule 75 (call_args)]
    ELSE            reduce using rule 6 (function)
    ELSE            [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 6 (function)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 6 (function)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 6 (function)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 6 (function)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 6 (function)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 6 (function)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 6 (function)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 6 (function)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 6 (function)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 6 (function)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 93
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 172

  106 expr: CALL ID LPAREN call_args • RPAREN

    RPAREN  shift, and go to state 188


State 173

   78 assignment_call: ID ASSIGN CALL ID LPAREN • call_args RPAREN SEMICOLON
  106 expr: CALL ID LPAREN • call_args RPAREN

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    $default  reduce using rule 75 (call_args)

    call_args  go to state 189
    call_list  go to state 65
    expr       go to state 69


State 174

   60 if_stmt: IF expr COLON stmt ELSE • COLON stmt

    COLON  shift, and go to state 190


State 175

   57 if_stmt: IF expr COLON block ELSE • COLON block

    COLON  shift, and go to state 191


State 176

   62 elif_list: ELIF • expr COLON block

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 192


State 177

   61 if_stmt: IF expr COLON block elif_list • ELSE COLON block
   63 elif_list: elif_list • ELIF expr COLON block

    ELSE  shift, and go to state 193
    ELIF  shift, and go to state 194


State 178

   70 for_stmt: FOR LPAREN assignment expr SEMICOLON • update_expr RPAREN COLON block
   71         | FOR LPAREN assignment expr SEMICOLON • update_expr RPAREN COLON stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 195
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    update_expr  go to state 196
    expr         go to state 197


State 179

   65 while_stmt: WHILE expr • COLON block
   66           | WHILE expr • COLON stmt
   67 do_while_stmt: DO COLON stmt_list WHILE expr • SEMICOLON
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR         shift, and go to state 95
    AND        shift, and go to state 96
    PLUS       shift, and go to state 97
    MINUS      shift, and go to state 98
    MULT       shift, and go to state 99
    DIV        shift, and go to state 100
    EQ         shift, and go to state 101
    NE         shift, and go to state 102
    GT         shift, and go to state 103
    GE         shift, and go to state 104
    LT         shift, and go to state 105
    LE         shift, and go to state 106
    COLON      shift, and go to state 118
    SEMICOLON  shift, and go to state 198


State 180

   68 do_while_stmt: DO COLON stmt WHILE expr • SEMICOLON
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR         shift, and go to state 95
    AND        shift, and go to state 96
    PLUS       shift, and go to state 97
    MINUS      shift, and go to state 98
    MULT       shift, and go to state 99
    DIV        shift, and go to state 100
    EQ         shift, and go to state 101
    NE         shift, and go to state 102
    GT         shift, and go to state 103
    GE         shift, and go to state 104
    LT         shift, and go to state 105
    LE         shift, and go to state 106
    SEMICOLON  shift, and go to state 199


State 181

   69 do_while_stmt: DO COLON block WHILE expr • SEMICOLON
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR         shift, and go to state 95
    AND        shift, and go to state 96
    PLUS       shift, and go to state 97
    MINUS      shift, and go to state 98
    MULT       shift, and go to state 99
    DIV        shift, and go to state 100
    EQ         shift, and go to state 101
    NE         shift, and go to state 102
    GT         shift, and go to state 103
    GE         shift, and go to state 104
    LT         shift, and go to state 105
    LE         shift, and go to state 106
    SEMICOLON  shift, and go to state 200


State 182

   79 void_call: CALL ID LPAREN call_args RPAREN • SEMICOLON
  106 expr: CALL ID LPAREN call_args RPAREN •

    SEMICOLON  shift, and go to state 201

    $default  reduce using rule 106 (expr)


State 183

   45 type_decl: TYPE TYPE_INT COLON ID • SEMICOLON
   50          | TYPE TYPE_INT COLON ID • COLON NUM SEMICOLON

    COLON      shift, and go to state 202
    SEMICOLON  shift, and go to state 203


State 184

   47 type_decl: TYPE TYPE_CHAR COLON ID • SEMICOLON
   51          | TYPE TYPE_CHAR COLON ID • COLON CHAR_LITERAL SEMICOLON

    COLON      shift, and go to state 204
    SEMICOLON  shift, and go to state 205


State 185

   49 type_decl: TYPE TYPE_REAL COLON ID • SEMICOLON

    SEMICOLON  shift, and go to state 206


State 186

   46 type_decl: TYPE TYPE_BOOL COLON ID • SEMICOLON
   53          | TYPE TYPE_BOOL COLON ID • COLON TRUE SEMICOLON
   54          | TYPE TYPE_BOOL COLON ID • COLON FALSE SEMICOLON

    COLON      shift, and go to state 207
    SEMICOLON  shift, and go to state 208


State 187

   48 type_decl: TYPE TYPE_STRING COLON ID • SEMICOLON
   52          | TYPE TYPE_STRING COLON ID • COLON STRING_LITERAL SEMICOLON

    COLON      shift, and go to state 209
    SEMICOLON  shift, and go to state 210


State 188

  106 expr: CALL ID LPAREN call_args RPAREN •

    $default  reduce using rule 106 (expr)


State 189

   78 assignment_call: ID ASSIGN CALL ID LPAREN call_args • RPAREN SEMICOLON
  106 expr: CALL ID LPAREN call_args • RPAREN

    RPAREN  shift, and go to state 211


State 190

   60 if_stmt: IF expr COLON stmt ELSE COLON • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 75 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 212
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 68
    expr             go to state 69


State 191

   57 if_stmt: IF expr COLON block ELSE COLON • block

    T_BEGIN  shift, and go to state 43

    block  go to state 213


State 192

   62 elif_list: ELIF expr • COLON block
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR     shift, and go to state 95
    AND    shift, and go to state 96
    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98
    MULT   shift, and go to state 99
    DIV    shift, and go to state 100
    EQ     shift, and go to state 101
    NE     shift, and go to state 102
    GT     shift, and go to state 103
    GE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106
    COLON  shift, and go to state 214


State 193

   61 if_stmt: IF expr COLON block elif_list ELSE • COLON block

    COLON  shift, and go to state 215


State 194

   63 elif_list: elif_list ELIF • expr COLON block

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 216


State 195

   72 update_expr: ID • ASSIGN expr
   97 expr: ID •
  107     | ID • LPAREN call_args RPAREN

    ASSIGN  shift, and go to state 217
    LPAREN  shift, and go to state 77

    $default  reduce using rule 97 (expr)


State 196

   70 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr • RPAREN COLON block
   71         | FOR LPAREN assignment expr SEMICOLON update_expr • RPAREN COLON stmt

    RPAREN  shift, and go to state 218


State 197

   73 update_expr: expr •
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR     shift, and go to state 95
    AND    shift, and go to state 96
    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98
    MULT   shift, and go to state 99
    DIV    shift, and go to state 100
    EQ     shift, and go to state 101
    NE     shift, and go to state 102
    GT     shift, and go to state 103
    GE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106

    $default  reduce using rule 73 (update_expr)


State 198

   67 do_while_stmt: DO COLON stmt_list WHILE expr SEMICOLON •

    $default  reduce using rule 67 (do_while_stmt)


State 199

   68 do_while_stmt: DO COLON stmt WHILE expr SEMICOLON •

    $default  reduce using rule 68 (do_while_stmt)


State 200

   69 do_while_stmt: DO COLON block WHILE expr SEMICOLON •

    $default  reduce using rule 69 (do_while_stmt)


State 201

   79 void_call: CALL ID LPAREN call_args RPAREN SEMICOLON •

    $default  reduce using rule 79 (void_call)


State 202

   50 type_decl: TYPE TYPE_INT COLON ID COLON • NUM SEMICOLON

    NUM  shift, and go to state 219


State 203

   45 type_decl: TYPE TYPE_INT COLON ID SEMICOLON •

    $default  reduce using rule 45 (type_decl)


State 204

   51 type_decl: TYPE TYPE_CHAR COLON ID COLON • CHAR_LITERAL SEMICOLON

    CHAR_LITERAL  shift, and go to state 220


State 205

   47 type_decl: TYPE TYPE_CHAR COLON ID SEMICOLON •

    $default  reduce using rule 47 (type_decl)


State 206

   49 type_decl: TYPE TYPE_REAL COLON ID SEMICOLON •

    $default  reduce using rule 49 (type_decl)


State 207

   53 type_decl: TYPE TYPE_BOOL COLON ID COLON • TRUE SEMICOLON
   54          | TYPE TYPE_BOOL COLON ID COLON • FALSE SEMICOLON

    TRUE   shift, and go to state 221
    FALSE  shift, and go to state 222


State 208

   46 type_decl: TYPE TYPE_BOOL COLON ID SEMICOLON •

    $default  reduce using rule 46 (type_decl)


State 209

   52 type_decl: TYPE TYPE_STRING COLON ID COLON • STRING_LITERAL SEMICOLON

    STRING_LITERAL  shift, and go to state 223


State 210

   48 type_decl: TYPE TYPE_STRING COLON ID SEMICOLON •

    $default  reduce using rule 48 (type_decl)


State 211

   78 assignment_call: ID ASSIGN CALL ID LPAREN call_args RPAREN • SEMICOLON
  106 expr: CALL ID LPAREN call_args RPAREN •

    SEMICOLON  shift, and go to state 224

    SEMICOLON  [reduce using rule 106 (expr)]
    $default   reduce using rule 106 (expr)


State 212

   60 if_stmt: IF expr COLON stmt ELSE COLON stmt •

    $default  reduce using rule 60 (if_stmt)


State 213

   57 if_stmt: IF expr COLON block ELSE COLON block •

    $default  reduce using rule 57 (if_stmt)


State 214

   62 elif_list: ELIF expr COLON • block

    T_BEGIN  shift, and go to state 43

    block  go to state 225


State 215

   61 if_stmt: IF expr COLON block elif_list ELSE COLON • block

    T_BEGIN  shift, and go to state 43

    block  go to state 226


State 216

   63 elif_list: elif_list ELIF expr • COLON block
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR     shift, and go to state 95
    AND    shift, and go to state 96
    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98
    MULT   shift, and go to state 99
    DIV    shift, and go to state 100
    EQ     shift, and go to state 101
    NE     shift, and go to state 102
    GT     shift, and go to state 103
    GE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106
    COLON  shift, and go to state 227


State 217

   72 update_expr: ID ASSIGN • expr

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 73
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    CALL            shift, and go to state 74
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    expr  go to state 228


State 218

   70 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN • COLON block
   71         | FOR LPAREN assignment expr SEMICOLON update_expr RPAREN • COLON stmt

    COLON  shift, and go to state 229


State 219

   50 type_decl: TYPE TYPE_INT COLON ID COLON NUM • SEMICOLON

    SEMICOLON  shift, and go to state 230


State 220

   51 type_decl: TYPE TYPE_CHAR COLON ID COLON CHAR_LITERAL • SEMICOLON

    SEMICOLON  shift, and go to state 231


State 221

   53 type_decl: TYPE TYPE_BOOL COLON ID COLON TRUE • SEMICOLON

    SEMICOLON  shift, and go to state 232


State 222

   54 type_decl: TYPE TYPE_BOOL COLON ID COLON FALSE • SEMICOLON

    SEMICOLON  shift, and go to state 233


State 223

   52 type_decl: TYPE TYPE_STRING COLON ID COLON STRING_LITERAL • SEMICOLON

    SEMICOLON  shift, and go to state 234


State 224

   78 assignment_call: ID ASSIGN CALL ID LPAREN call_args RPAREN SEMICOLON •

    $default  reduce using rule 78 (assignment_call)


State 225

   62 elif_list: ELIF expr COLON block •

    $default  reduce using rule 62 (elif_list)


State 226

   61 if_stmt: IF expr COLON block elif_list ELSE COLON block •

    $default  reduce using rule 61 (if_stmt)


State 227

   63 elif_list: elif_list ELIF expr COLON • block

    T_BEGIN  shift, and go to state 43

    block  go to state 235


State 228

   72 update_expr: ID ASSIGN expr •
   84 expr: expr • PLUS expr
   85     | expr • MINUS expr
   86     | expr • MULT expr
   87     | expr • DIV expr
   88     | expr • EQ expr
   89     | expr • NE expr
   90     | expr • LT expr
   91     | expr • GT expr
   92     | expr • LE expr
   93     | expr • GE expr
  108     | expr • AND expr
  109     | expr • OR expr

    OR     shift, and go to state 95
    AND    shift, and go to state 96
    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98
    MULT   shift, and go to state 99
    DIV    shift, and go to state 100
    EQ     shift, and go to state 101
    NE     shift, and go to state 102
    GT     shift, and go to state 103
    GE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106

    $default  reduce using rule 72 (update_expr)


State 229

   70 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON • block
   71         | FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON • stmt

    OR              shift, and go to state 34
    AND             shift, and go to state 35
    NOT             shift, and go to state 36
    ID              shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    NUM             shift, and go to state 40
    TRUE            shift, and go to state 41
    FALSE           shift, and go to state 42
    DEF             shift, and go to state 2
    T_BEGIN         shift, and go to state 43
    IF              shift, and go to state 44
    WHILE           shift, and go to state 45
    FOR             shift, and go to state 46
    DO              shift, and go to state 47
    CALL            shift, and go to state 48
    RETURN          shift, and go to state 49
    VAR             shift, and go to state 50
    NULLPTR         shift, and go to state 51
    LPAREN          shift, and go to state 52
    LBRACK          shift, and go to state 53

    OR              [reduce using rule 75 (call_args)]
    AND             [reduce using rule 75 (call_args)]
    NOT             [reduce using rule 75 (call_args)]
    ID              [reduce using rule 75 (call_args)]
    CHAR_LITERAL    [reduce using rule 75 (call_args)]
    STRING_LITERAL  [reduce using rule 75 (call_args)]
    NUM             [reduce using rule 75 (call_args)]
    TRUE            [reduce using rule 75 (call_args)]
    FALSE           [reduce using rule 75 (call_args)]
    DEF             [reduce using rule 75 (call_args)]
    T_BEGIN         [reduce using rule 75 (call_args)]
    IF              [reduce using rule 75 (call_args)]
    WHILE           [reduce using rule 75 (call_args)]
    FOR             [reduce using rule 75 (call_args)]
    DO              [reduce using rule 75 (call_args)]
    CALL            [reduce using rule 75 (call_args)]
    RETURN          [reduce using rule 75 (call_args)]
    VAR             [reduce using rule 75 (call_args)]
    NULLPTR         [reduce using rule 75 (call_args)]
    LPAREN          [reduce using rule 75 (call_args)]
    LBRACK          [reduce using rule 75 (call_args)]
    $default        reduce using rule 75 (call_args)

    func_list        go to state 54
    function         go to state 5
    stmt             go to state 236
    assignment       go to state 57
    var_stmt         go to state 58
    return_stmt      go to state 59
    if_stmt          go to state 60
    while_stmt       go to state 61
    do_while_stmt    go to state 62
    for_stmt         go to state 63
    call_args        go to state 64
    call_list        go to state 65
    assignment_call  go to state 66
    void_call        go to state 67
    block            go to state 237
    expr             go to state 69


State 230

   50 type_decl: TYPE TYPE_INT COLON ID COLON NUM SEMICOLON •

    $default  reduce using rule 50 (type_decl)


State 231

   51 type_decl: TYPE TYPE_CHAR COLON ID COLON CHAR_LITERAL SEMICOLON •

    $default  reduce using rule 51 (type_decl)


State 232

   53 type_decl: TYPE TYPE_BOOL COLON ID COLON TRUE SEMICOLON •

    $default  reduce using rule 53 (type_decl)


State 233

   54 type_decl: TYPE TYPE_BOOL COLON ID COLON FALSE SEMICOLON •

    $default  reduce using rule 54 (type_decl)


State 234

   52 type_decl: TYPE TYPE_STRING COLON ID COLON STRING_LITERAL SEMICOLON •

    $default  reduce using rule 52 (type_decl)


State 235

   63 elif_list: elif_list ELIF expr COLON block •

    $default  reduce using rule 63 (elif_list)


State 236

   71 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON stmt •

    $default  reduce using rule 71 (for_stmt)


State 237

   31 stmt: block •
   70 for_stmt: FOR LPAREN assignment expr SEMICOLON update_expr RPAREN COLON block •

    $end            reduce using rule 31 (stmt)
    $end            [reduce using rule 70 (for_stmt)]
    OR              reduce using rule 31 (stmt)
    OR              [reduce using rule 70 (for_stmt)]
    AND             reduce using rule 31 (stmt)
    AND             [reduce using rule 70 (for_stmt)]
    NOT             reduce using rule 31 (stmt)
    NOT             [reduce using rule 70 (for_stmt)]
    ID              reduce using rule 31 (stmt)
    ID              [reduce using rule 70 (for_stmt)]
    CHAR_LITERAL    reduce using rule 31 (stmt)
    CHAR_LITERAL    [reduce using rule 70 (for_stmt)]
    STRING_LITERAL  reduce using rule 31 (stmt)
    STRING_LITERAL  [reduce using rule 70 (for_stmt)]
    NUM             reduce using rule 31 (stmt)
    NUM             [reduce using rule 70 (for_stmt)]
    TRUE            reduce using rule 31 (stmt)
    TRUE            [reduce using rule 70 (for_stmt)]
    FALSE           reduce using rule 31 (stmt)
    FALSE           [reduce using rule 70 (for_stmt)]
    DEF             reduce using rule 31 (stmt)
    DEF             [reduce using rule 70 (for_stmt)]
    T_BEGIN         reduce using rule 31 (stmt)
    T_BEGIN         [reduce using rule 70 (for_stmt)]
    T_END           reduce using rule 31 (stmt)
    T_END           [reduce using rule 70 (for_stmt)]
    IF              reduce using rule 31 (stmt)
    IF              [reduce using rule 70 (for_stmt)]
    ELSE            reduce using rule 31 (stmt)
    ELSE            [reduce using rule 70 (for_stmt)]
    WHILE           reduce using rule 31 (stmt)
    WHILE           [reduce using rule 70 (for_stmt)]
    FOR             reduce using rule 31 (stmt)
    FOR             [reduce using rule 70 (for_stmt)]
    DO              reduce using rule 31 (stmt)
    DO              [reduce using rule 70 (for_stmt)]
    CALL            reduce using rule 31 (stmt)
    CALL            [reduce using rule 70 (for_stmt)]
    RETURN          reduce using rule 31 (stmt)
    RETURN          [reduce using rule 70 (for_stmt)]
    VAR             reduce using rule 31 (stmt)
    VAR             [reduce using rule 70 (for_stmt)]
    NULLPTR         reduce using rule 31 (stmt)
    NULLPTR         [reduce using rule 70 (for_stmt)]
    LPAREN          reduce using rule 31 (stmt)
    LPAREN          [reduce using rule 70 (for_stmt)]
    LBRACK          reduce using rule 31 (stmt)
    LBRACK          [reduce using rule 70 (for_stmt)]
    $default        reduce using rule 31 (stmt)
